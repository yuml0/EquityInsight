// This file is auto-generated by @hey-api/openapi-ts

import { type DefaultError, type InfiniteData, infiniteQueryOptions, queryOptions, type UseMutationOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import { deleteV3AssetsAssetId, deleteV3CompaniesCompanyId, deleteV3CompaniesCompanyIdSubsidiariesSubsidiaryId, deleteV3MarketsGroupsGroupId, deleteV3MarketsGroupsGroupIdConstituentsIndexId, deleteV3MarketsIndexesIndexId, getV3Assets, getV3AssetsAssetId, getV3AssetsAssetIdClimateScores, getV3AssetsAssetIdOwnership, getV3AssetsSearch, getV3Companies, getV3CompaniesCompanyIdAssets, getV3CompaniesCompanyIdAssetsAggregation, getV3CompaniesCompanyIdAssetsClimateImpacts, getV3CompaniesCompanyIdAssetsClimateImpactsAggregation, getV3CompaniesCompanyIdAssetsClimateScores, getV3CompaniesCompanyIdAssetsClimateScoresAggregation, getV3CompaniesCompanyIdAssetsClimateScoresGroups, getV3CompaniesCompanyIdAssetsLocations, getV3CompaniesCompanyIdClimateImpacts, getV3CompaniesCompanyIdClimateScores, getV3CompaniesCompanyIdGeoClusters, getV3CompaniesCompanyIdSubsidiaries, getV3CompaniesId, getV3CompanySearch, getV3MarketsGroups, getV3MarketsGroupsGroupId, getV3MarketsGroupsGroupIdConstituents, getV3MarketsGroupsSearch, getV3MarketsIndexes, getV3MarketsIndexesIndexId, getV3MarketsIndexesIndexIdAssets, getV3MarketsIndexesIndexIdAssetsAggregation, getV3MarketsIndexesIndexIdAssetsClimateImpacts, getV3MarketsIndexesIndexIdAssetsClimateImpactsAggregation, getV3MarketsIndexesIndexIdAssetsClimateScores, getV3MarketsIndexesIndexIdAssetsClimateScoresAggregation, getV3MarketsIndexesIndexIdAssetsClimateScoresHistogram, getV3MarketsIndexesIndexIdClimateImpacts, getV3MarketsIndexesIndexIdClimateScores, getV3MarketsIndexesIndexIdCompanies, getV3MarketsIndexesIndexIdCompaniesAggregation, getV3MarketsIndexesIndexIdCompaniesClimateImpacts, getV3MarketsIndexesIndexIdCompaniesClimateScores, getV3MarketsIndexesIndexIdGeoClusters, getV3MarketsIndexesSearch, type Options, patchV3AssetsAssetId, patchV3CompaniesCompanyId, patchV3MarketsGroupsGroupId, patchV3MarketsIndexesIndexId, postV3Companies, postV3CompaniesCompanyIdSubsidiaries, postV3MarketsGroupsGroupIdConstituents, v3GetMarketsIndexesIndexIdCompaniesClimateScoresHistogram } from '../sdk.gen';
import type { DeleteV3AssetsAssetIdData, DeleteV3AssetsAssetIdResponse, DeleteV3CompaniesCompanyIdData, DeleteV3CompaniesCompanyIdResponse, DeleteV3CompaniesCompanyIdSubsidiariesSubsidiaryIdData, DeleteV3CompaniesCompanyIdSubsidiariesSubsidiaryIdResponse, DeleteV3MarketsGroupsGroupIdConstituentsIndexIdData, DeleteV3MarketsGroupsGroupIdConstituentsIndexIdResponse, DeleteV3MarketsGroupsGroupIdData, DeleteV3MarketsGroupsGroupIdResponse, DeleteV3MarketsIndexesIndexIdData, DeleteV3MarketsIndexesIndexIdResponse, GetV3AssetsAssetIdClimateScoresData, GetV3AssetsAssetIdData, GetV3AssetsAssetIdOwnershipData, GetV3AssetsData, GetV3AssetsError, GetV3AssetsResponse, GetV3AssetsSearchData, GetV3CompaniesCompanyIdAssetsAggregationData, GetV3CompaniesCompanyIdAssetsClimateImpactsAggregationData, GetV3CompaniesCompanyIdAssetsClimateImpactsData, GetV3CompaniesCompanyIdAssetsClimateImpactsResponse, GetV3CompaniesCompanyIdAssetsClimateScoresAggregationData, GetV3CompaniesCompanyIdAssetsClimateScoresData, GetV3CompaniesCompanyIdAssetsClimateScoresGroupsData, GetV3CompaniesCompanyIdAssetsClimateScoresResponse, GetV3CompaniesCompanyIdAssetsData, GetV3CompaniesCompanyIdAssetsLocationsData, GetV3CompaniesCompanyIdAssetsResponse, GetV3CompaniesCompanyIdClimateImpactsData, GetV3CompaniesCompanyIdClimateScoresData, GetV3CompaniesCompanyIdGeoClustersData, GetV3CompaniesCompanyIdSubsidiariesData, GetV3CompaniesData, GetV3CompaniesIdData, GetV3CompaniesResponse, GetV3CompanySearchData, GetV3MarketsGroupsData, GetV3MarketsGroupsGroupIdConstituentsData, GetV3MarketsGroupsGroupIdConstituentsResponse, GetV3MarketsGroupsGroupIdData, GetV3MarketsGroupsResponse, GetV3MarketsGroupsSearchData, GetV3MarketsIndexesData, GetV3MarketsIndexesIndexIdAssetsAggregationData, GetV3MarketsIndexesIndexIdAssetsClimateImpactsAggregationData, GetV3MarketsIndexesIndexIdAssetsClimateImpactsData, GetV3MarketsIndexesIndexIdAssetsClimateImpactsResponse, GetV3MarketsIndexesIndexIdAssetsClimateScoresAggregationData, GetV3MarketsIndexesIndexIdAssetsClimateScoresData, GetV3MarketsIndexesIndexIdAssetsClimateScoresHistogramData, GetV3MarketsIndexesIndexIdAssetsClimateScoresResponse, GetV3MarketsIndexesIndexIdAssetsData, GetV3MarketsIndexesIndexIdAssetsResponse, GetV3MarketsIndexesIndexIdClimateImpactsData, GetV3MarketsIndexesIndexIdClimateScoresData, GetV3MarketsIndexesIndexIdCompaniesAggregationData, GetV3MarketsIndexesIndexIdCompaniesClimateImpactsData, GetV3MarketsIndexesIndexIdCompaniesClimateImpactsResponse, GetV3MarketsIndexesIndexIdCompaniesClimateScoresData, GetV3MarketsIndexesIndexIdCompaniesClimateScoresResponse, GetV3MarketsIndexesIndexIdCompaniesData, GetV3MarketsIndexesIndexIdCompaniesResponse, GetV3MarketsIndexesIndexIdData, GetV3MarketsIndexesIndexIdGeoClustersData, GetV3MarketsIndexesResponse, GetV3MarketsIndexesSearchData, PatchV3AssetsAssetIdData, PatchV3AssetsAssetIdResponse, PatchV3CompaniesCompanyIdData, PatchV3CompaniesCompanyIdResponse, PatchV3MarketsGroupsGroupIdData, PatchV3MarketsGroupsGroupIdResponse, PatchV3MarketsIndexesIndexIdData, PatchV3MarketsIndexesIndexIdResponse, PostV3CompaniesCompanyIdSubsidiariesData, PostV3CompaniesCompanyIdSubsidiariesResponse, PostV3CompaniesData, PostV3CompaniesResponse, PostV3MarketsGroupsGroupIdConstituentsData, PostV3MarketsGroupsGroupIdConstituentsResponse, V3GetMarketsIndexesIndexIdCompaniesClimateScoresHistogramData } from '../types.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getV3AssetsQueryKey = (options?: Options<GetV3AssetsData>) => createQueryKey('getV3Assets', options);

/**
 * Paginate assets
 * Use pagination parameters (`limit` and `cursor`) along with query filters (`country`, or `asset_type`) to retrieve physical asset data in batches.
 */
export const getV3AssetsOptions = (options?: Options<GetV3AssetsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3Assets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3AssetsQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = {
        ...queryKey[0]
    };
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const getV3AssetsInfiniteQueryKey = (options?: Options<GetV3AssetsData>): QueryKey<Options<GetV3AssetsData>> => createQueryKey('getV3Assets', options, true);

/**
 * Paginate assets
 * Use pagination parameters (`limit` and `cursor`) along with query filters (`country`, or `asset_type`) to retrieve physical asset data in batches.
 */
export const getV3AssetsInfiniteOptions = (options?: Options<GetV3AssetsData>) => {
    return infiniteQueryOptions<GetV3AssetsResponse, GetV3AssetsError, InfiniteData<GetV3AssetsResponse>, QueryKey<Options<GetV3AssetsData>>, string | Pick<QueryKey<Options<GetV3AssetsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV3AssetsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    cursor: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV3Assets({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3AssetsInfiniteQueryKey(options)
    });
};

/**
 * Delete an asset
 * Use physical asset identifier (`asset_id`)  to delete physical asset information. The endpoint is active only for authorized `asset_id`.
 */
export const deleteV3AssetsAssetIdMutation = (options?: Partial<Options<DeleteV3AssetsAssetIdData>>): UseMutationOptions<DeleteV3AssetsAssetIdResponse, DefaultError, Options<DeleteV3AssetsAssetIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteV3AssetsAssetIdResponse, DefaultError, Options<DeleteV3AssetsAssetIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteV3AssetsAssetId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV3AssetsAssetIdQueryKey = (options: Options<GetV3AssetsAssetIdData>) => createQueryKey('getV3AssetsAssetId', options);

/**
 * Get asset by id
 * Use physical asset identifier (`asset_id`)  to retrieve physical asset information.
 */
export const getV3AssetsAssetIdOptions = (options: Options<GetV3AssetsAssetIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3AssetsAssetId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3AssetsAssetIdQueryKey(options)
    });
};

/**
 * Update an asset
 * Use physical asset identifier (`asset_id`)  to update physical asset information. The endpoint is active only for authorized `asset_id`.
 */
export const patchV3AssetsAssetIdMutation = (options?: Partial<Options<PatchV3AssetsAssetIdData>>): UseMutationOptions<PatchV3AssetsAssetIdResponse, DefaultError, Options<PatchV3AssetsAssetIdData>> => {
    const mutationOptions: UseMutationOptions<PatchV3AssetsAssetIdResponse, DefaultError, Options<PatchV3AssetsAssetIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchV3AssetsAssetId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV3AssetsAssetIdOwnershipQueryKey = (options: Options<GetV3AssetsAssetIdOwnershipData>) => createQueryKey('getV3AssetsAssetIdOwnership', options);

/**
 * Get asset ownership
 * Use physical asset identifier (`asset_id`) to update physical asset information.
 */
export const getV3AssetsAssetIdOwnershipOptions = (options: Options<GetV3AssetsAssetIdOwnershipData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3AssetsAssetIdOwnership({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3AssetsAssetIdOwnershipQueryKey(options)
    });
};

/**
 * Delete a company
 * Use company identifier (`company_id`) to delete a company. The endpoint is active only for authorized `company_id`.
 */
export const deleteV3CompaniesCompanyIdMutation = (options?: Partial<Options<DeleteV3CompaniesCompanyIdData>>): UseMutationOptions<DeleteV3CompaniesCompanyIdResponse, DefaultError, Options<DeleteV3CompaniesCompanyIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteV3CompaniesCompanyIdResponse, DefaultError, Options<DeleteV3CompaniesCompanyIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteV3CompaniesCompanyId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV3CompaniesIdQueryKey = (options: Options<GetV3CompaniesIdData>) => createQueryKey('getV3CompaniesId', options);

/**
 * Get company by id
 * Use company identifier (`company_id`) to retrieve information on the company
 */
export const getV3CompaniesIdOptions = (options: Options<GetV3CompaniesIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3CompaniesId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3CompaniesIdQueryKey(options)
    });
};

/**
 * Update a company
 * Use company identifier (`company_id`) to update a company. The endpoint is active only for authorized `company_id`.
 */
export const patchV3CompaniesCompanyIdMutation = (options?: Partial<Options<PatchV3CompaniesCompanyIdData>>): UseMutationOptions<PatchV3CompaniesCompanyIdResponse, DefaultError, Options<PatchV3CompaniesCompanyIdData>> => {
    const mutationOptions: UseMutationOptions<PatchV3CompaniesCompanyIdResponse, DefaultError, Options<PatchV3CompaniesCompanyIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchV3CompaniesCompanyId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV3CompaniesCompanyIdClimateScoresQueryKey = (options: Options<GetV3CompaniesCompanyIdClimateScoresData>) => createQueryKey('getV3CompaniesCompanyIdClimateScores', options);

/**
 * Get multifactor asset damage analytics at company-level
 * Use company identifier (`company_id`) to retrieve company-level multifactor asset damage analytics.
 */
export const getV3CompaniesCompanyIdClimateScoresOptions = (options: Options<GetV3CompaniesCompanyIdClimateScoresData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3CompaniesCompanyIdClimateScores({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3CompaniesCompanyIdClimateScoresQueryKey(options)
    });
};

export const getV3CompaniesCompanyIdClimateImpactsQueryKey = (options: Options<GetV3CompaniesCompanyIdClimateImpactsData>) => createQueryKey('getV3CompaniesCompanyIdClimateImpacts', options);

/**
 * Get singlefactor asset damage analytics at company-level
 * Use company identifier (`company_id`) to retrieve company-level singlefactor asset damage analytics.
 */
export const getV3CompaniesCompanyIdClimateImpactsOptions = (options: Options<GetV3CompaniesCompanyIdClimateImpactsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3CompaniesCompanyIdClimateImpacts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3CompaniesCompanyIdClimateImpactsQueryKey(options)
    });
};

export const getV3CompaniesCompanyIdAssetsQueryKey = (options: Options<GetV3CompaniesCompanyIdAssetsData>) => createQueryKey('getV3CompaniesCompanyIdAssets', options);

/**
 * Paginate company assets
 * Use company identifier (`company_id`) and pagination parameters (limit and cursor) along with query filters (`country`, or `asset_type`) to retrieve physical asset data of the company in batches.
 */
export const getV3CompaniesCompanyIdAssetsOptions = (options: Options<GetV3CompaniesCompanyIdAssetsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3CompaniesCompanyIdAssets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3CompaniesCompanyIdAssetsQueryKey(options)
    });
};

export const getV3CompaniesCompanyIdAssetsInfiniteQueryKey = (options: Options<GetV3CompaniesCompanyIdAssetsData>): QueryKey<Options<GetV3CompaniesCompanyIdAssetsData>> => createQueryKey('getV3CompaniesCompanyIdAssets', options, true);

/**
 * Paginate company assets
 * Use company identifier (`company_id`) and pagination parameters (limit and cursor) along with query filters (`country`, or `asset_type`) to retrieve physical asset data of the company in batches.
 */
export const getV3CompaniesCompanyIdAssetsInfiniteOptions = (options: Options<GetV3CompaniesCompanyIdAssetsData>) => {
    return infiniteQueryOptions<GetV3CompaniesCompanyIdAssetsResponse, DefaultError, InfiniteData<GetV3CompaniesCompanyIdAssetsResponse>, QueryKey<Options<GetV3CompaniesCompanyIdAssetsData>>, string | Pick<QueryKey<Options<GetV3CompaniesCompanyIdAssetsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV3CompaniesCompanyIdAssetsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    cursor: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV3CompaniesCompanyIdAssets({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3CompaniesCompanyIdAssetsInfiniteQueryKey(options)
    });
};

export const getV3CompaniesCompanyIdAssetsLocationsQueryKey = (options: Options<GetV3CompaniesCompanyIdAssetsLocationsData>) => createQueryKey('getV3CompaniesCompanyIdAssetsLocations', options);

/**
 * Get physical asset locations
 * Use company identifier (`company_id`) to retrieve physical asset locations associated with the company.
 */
export const getV3CompaniesCompanyIdAssetsLocationsOptions = (options: Options<GetV3CompaniesCompanyIdAssetsLocationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3CompaniesCompanyIdAssetsLocations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3CompaniesCompanyIdAssetsLocationsQueryKey(options)
    });
};

export const getV3CompaniesCompanyIdAssetsClimateScoresQueryKey = (options: Options<GetV3CompaniesCompanyIdAssetsClimateScoresData>) => createQueryKey('getV3CompaniesCompanyIdAssetsClimateScores', options);

/**
 * Get multifactor asset damage analytics in specified range
 * Use company identifier (`company_id`) to retrieve company-level multifactor asset damage analytics.
 */
export const getV3CompaniesCompanyIdAssetsClimateScoresOptions = (options: Options<GetV3CompaniesCompanyIdAssetsClimateScoresData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3CompaniesCompanyIdAssetsClimateScores({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3CompaniesCompanyIdAssetsClimateScoresQueryKey(options)
    });
};

export const getV3CompaniesCompanyIdAssetsClimateScoresInfiniteQueryKey = (options: Options<GetV3CompaniesCompanyIdAssetsClimateScoresData>): QueryKey<Options<GetV3CompaniesCompanyIdAssetsClimateScoresData>> => createQueryKey('getV3CompaniesCompanyIdAssetsClimateScores', options, true);

/**
 * Get multifactor asset damage analytics in specified range
 * Use company identifier (`company_id`) to retrieve company-level multifactor asset damage analytics.
 */
export const getV3CompaniesCompanyIdAssetsClimateScoresInfiniteOptions = (options: Options<GetV3CompaniesCompanyIdAssetsClimateScoresData>) => {
    return infiniteQueryOptions<GetV3CompaniesCompanyIdAssetsClimateScoresResponse, DefaultError, InfiniteData<GetV3CompaniesCompanyIdAssetsClimateScoresResponse>, QueryKey<Options<GetV3CompaniesCompanyIdAssetsClimateScoresData>>, string | Pick<QueryKey<Options<GetV3CompaniesCompanyIdAssetsClimateScoresData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV3CompaniesCompanyIdAssetsClimateScoresData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    cursor: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV3CompaniesCompanyIdAssetsClimateScores({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3CompaniesCompanyIdAssetsClimateScoresInfiniteQueryKey(options)
    });
};

export const getV3CompaniesCompanyIdAssetsClimateScoresAggregationQueryKey = (options: Options<GetV3CompaniesCompanyIdAssetsClimateScoresAggregationData>) => createQueryKey('getV3CompaniesCompanyIdAssetsClimateScoresAggregation', options);

/**
 * Get multifactor asset damage analytics in aggregate level
 * Use company identifier (`company_id`) along with aggregation level parameters (`country`, `state`, or `asset_type`) to retrieve asset damage analytics.
 */
export const getV3CompaniesCompanyIdAssetsClimateScoresAggregationOptions = (options: Options<GetV3CompaniesCompanyIdAssetsClimateScoresAggregationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3CompaniesCompanyIdAssetsClimateScoresAggregation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3CompaniesCompanyIdAssetsClimateScoresAggregationQueryKey(options)
    });
};

export const getV3CompaniesCompanyIdAssetsClimateScoresGroupsQueryKey = (options: Options<GetV3CompaniesCompanyIdAssetsClimateScoresGroupsData>) => createQueryKey('getV3CompaniesCompanyIdAssetsClimateScoresGroups', options);

/**
 * Get company asset climate scores histogram
 * Distribute the climate scores of the assets owned by this company into bins to create a histogram. The number of bins is supplied by the 'bins' parameter
 *
 * The bin width is calculated from the number of bins by creating equal thresholds from `0.0` to `1.0`. Metrics such as VAR that go above `1.0` will be placed into the last bin.
 *
 * Only the first metric supplied in the `metrics` parameter is used in the histogram.
 *
 * The `bin_index` in the response will range from `1` to the number of bins.
 */
export const getV3CompaniesCompanyIdAssetsClimateScoresGroupsOptions = (options: Options<GetV3CompaniesCompanyIdAssetsClimateScoresGroupsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3CompaniesCompanyIdAssetsClimateScoresGroups({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3CompaniesCompanyIdAssetsClimateScoresGroupsQueryKey(options)
    });
};

export const getV3CompaniesCompanyIdAssetsClimateImpactsQueryKey = (options: Options<GetV3CompaniesCompanyIdAssetsClimateImpactsData>) => createQueryKey('getV3CompaniesCompanyIdAssetsClimateImpacts', options);

/**
 * Get singlefactor asset damage analytics at asset-level
 * Use company identifier (`company_id`) to retrieve company-level singlefactor asset damage analytics.
 */
export const getV3CompaniesCompanyIdAssetsClimateImpactsOptions = (options: Options<GetV3CompaniesCompanyIdAssetsClimateImpactsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3CompaniesCompanyIdAssetsClimateImpacts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3CompaniesCompanyIdAssetsClimateImpactsQueryKey(options)
    });
};

export const getV3CompaniesCompanyIdAssetsClimateImpactsInfiniteQueryKey = (options: Options<GetV3CompaniesCompanyIdAssetsClimateImpactsData>): QueryKey<Options<GetV3CompaniesCompanyIdAssetsClimateImpactsData>> => createQueryKey('getV3CompaniesCompanyIdAssetsClimateImpacts', options, true);

/**
 * Get singlefactor asset damage analytics at asset-level
 * Use company identifier (`company_id`) to retrieve company-level singlefactor asset damage analytics.
 */
export const getV3CompaniesCompanyIdAssetsClimateImpactsInfiniteOptions = (options: Options<GetV3CompaniesCompanyIdAssetsClimateImpactsData>) => {
    return infiniteQueryOptions<GetV3CompaniesCompanyIdAssetsClimateImpactsResponse, DefaultError, InfiniteData<GetV3CompaniesCompanyIdAssetsClimateImpactsResponse>, QueryKey<Options<GetV3CompaniesCompanyIdAssetsClimateImpactsData>>, string | Pick<QueryKey<Options<GetV3CompaniesCompanyIdAssetsClimateImpactsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV3CompaniesCompanyIdAssetsClimateImpactsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    cursor: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV3CompaniesCompanyIdAssetsClimateImpacts({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3CompaniesCompanyIdAssetsClimateImpactsInfiniteQueryKey(options)
    });
};

export const getV3CompaniesCompanyIdAssetsClimateImpactsAggregationQueryKey = (options: Options<GetV3CompaniesCompanyIdAssetsClimateImpactsAggregationData>) => createQueryKey('getV3CompaniesCompanyIdAssetsClimateImpactsAggregation', options);

/**
 * Get singlefactor asset damage analytics in aggregate level
 * Use company identifier (`company_id`) along with aggregation level parameters (`country`, `state`, or `asset_type`) to retrieve asset damage analytics.
 */
export const getV3CompaniesCompanyIdAssetsClimateImpactsAggregationOptions = (options: Options<GetV3CompaniesCompanyIdAssetsClimateImpactsAggregationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3CompaniesCompanyIdAssetsClimateImpactsAggregation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3CompaniesCompanyIdAssetsClimateImpactsAggregationQueryKey(options)
    });
};

export const getV3CompaniesCompanyIdAssetsAggregationQueryKey = (options: Options<GetV3CompaniesCompanyIdAssetsAggregationData>) => createQueryKey('getV3CompaniesCompanyIdAssetsAggregation', options);

/**
 * Get asset aggregation
 * Aggregate the assets of this company by the requested property
 */
export const getV3CompaniesCompanyIdAssetsAggregationOptions = (options: Options<GetV3CompaniesCompanyIdAssetsAggregationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3CompaniesCompanyIdAssetsAggregation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3CompaniesCompanyIdAssetsAggregationQueryKey(options)
    });
};

export const getV3CompaniesCompanyIdSubsidiariesQueryKey = (options: Options<GetV3CompaniesCompanyIdSubsidiariesData>) => createQueryKey('getV3CompaniesCompanyIdSubsidiaries', options);

/**
 * Get company subsidiaries
 * Use company identifier (`company_id`) to retrieve subsidiaries. The endpoint is available only to authorized users.
 */
export const getV3CompaniesCompanyIdSubsidiariesOptions = (options: Options<GetV3CompaniesCompanyIdSubsidiariesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3CompaniesCompanyIdSubsidiaries({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3CompaniesCompanyIdSubsidiariesQueryKey(options)
    });
};

/**
 * Add subsidiary company
 * Use company identifier (company_id) to create a subsidiary. The endpoint is available only to authorized users.
 */
export const postV3CompaniesCompanyIdSubsidiariesMutation = (options?: Partial<Options<PostV3CompaniesCompanyIdSubsidiariesData>>): UseMutationOptions<PostV3CompaniesCompanyIdSubsidiariesResponse, DefaultError, Options<PostV3CompaniesCompanyIdSubsidiariesData>> => {
    const mutationOptions: UseMutationOptions<PostV3CompaniesCompanyIdSubsidiariesResponse, DefaultError, Options<PostV3CompaniesCompanyIdSubsidiariesData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postV3CompaniesCompanyIdSubsidiaries({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV3AssetsAssetIdClimateScoresQueryKey = (options: Options<GetV3AssetsAssetIdClimateScoresData>) => createQueryKey('getV3AssetsAssetIdClimateScores', options);

/**
 * Get asset physical risk analytics
 * Use physical asset identifier (`asset_id`) to retrieve the physical risk analytics.
 */
export const getV3AssetsAssetIdClimateScoresOptions = (options: Options<GetV3AssetsAssetIdClimateScoresData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3AssetsAssetIdClimateScores({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3AssetsAssetIdClimateScoresQueryKey(options)
    });
};

export const getV3CompaniesQueryKey = (options?: Options<GetV3CompaniesData>) => createQueryKey('getV3Companies', options);

/**
 * Paginate companies
 * Paginate through all companies using requested filters
 *
 * `scope` query parameter values:
 * * `public` - Filter to all public companies
 * * `organization` - Filter to companies that belong to the current organization
 */
export const getV3CompaniesOptions = (options?: Options<GetV3CompaniesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3Companies({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3CompaniesQueryKey(options)
    });
};

export const getV3CompaniesInfiniteQueryKey = (options?: Options<GetV3CompaniesData>): QueryKey<Options<GetV3CompaniesData>> => createQueryKey('getV3Companies', options, true);

/**
 * Paginate companies
 * Paginate through all companies using requested filters
 *
 * `scope` query parameter values:
 * * `public` - Filter to all public companies
 * * `organization` - Filter to companies that belong to the current organization
 */
export const getV3CompaniesInfiniteOptions = (options?: Options<GetV3CompaniesData>) => {
    return infiniteQueryOptions<GetV3CompaniesResponse, DefaultError, InfiniteData<GetV3CompaniesResponse>, QueryKey<Options<GetV3CompaniesData>>, string | Pick<QueryKey<Options<GetV3CompaniesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV3CompaniesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    cursor: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV3Companies({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3CompaniesInfiniteQueryKey(options)
    });
};

/**
 * Create new company
 * Create a new company
 */
export const postV3CompaniesMutation = (options?: Partial<Options<PostV3CompaniesData>>): UseMutationOptions<PostV3CompaniesResponse, DefaultError, Options<PostV3CompaniesData>> => {
    const mutationOptions: UseMutationOptions<PostV3CompaniesResponse, DefaultError, Options<PostV3CompaniesData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postV3Companies({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV3CompanySearchQueryKey = (options?: Options<GetV3CompanySearchData>) => createQueryKey('getV3CompanySearch', options);

/**
 * Search for companies
 * Search for companies by name or identification codes
 */
export const getV3CompanySearchOptions = (options?: Options<GetV3CompanySearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3CompanySearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3CompanySearchQueryKey(options)
    });
};

export const getV3MarketsGroupsQueryKey = (options?: Options<GetV3MarketsGroupsData>) => createQueryKey('getV3MarketsGroups', options);

/**
 * Paginate market index groups
 * Paginate through all market index groups using requested filters
 */
export const getV3MarketsGroupsOptions = (options?: Options<GetV3MarketsGroupsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsGroups({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsGroupsQueryKey(options)
    });
};

export const getV3MarketsGroupsInfiniteQueryKey = (options?: Options<GetV3MarketsGroupsData>): QueryKey<Options<GetV3MarketsGroupsData>> => createQueryKey('getV3MarketsGroups', options, true);

/**
 * Paginate market index groups
 * Paginate through all market index groups using requested filters
 */
export const getV3MarketsGroupsInfiniteOptions = (options?: Options<GetV3MarketsGroupsData>) => {
    return infiniteQueryOptions<GetV3MarketsGroupsResponse, DefaultError, InfiniteData<GetV3MarketsGroupsResponse>, QueryKey<Options<GetV3MarketsGroupsData>>, string | Pick<QueryKey<Options<GetV3MarketsGroupsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV3MarketsGroupsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    cursor: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV3MarketsGroups({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsGroupsInfiniteQueryKey(options)
    });
};

/**
 * Delete a market index group
 * Delete the specified market index group
 */
export const deleteV3MarketsGroupsGroupIdMutation = (options?: Partial<Options<DeleteV3MarketsGroupsGroupIdData>>): UseMutationOptions<DeleteV3MarketsGroupsGroupIdResponse, DefaultError, Options<DeleteV3MarketsGroupsGroupIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteV3MarketsGroupsGroupIdResponse, DefaultError, Options<DeleteV3MarketsGroupsGroupIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteV3MarketsGroupsGroupId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV3MarketsGroupsGroupIdQueryKey = (options: Options<GetV3MarketsGroupsGroupIdData>) => createQueryKey('getV3MarketsGroupsGroupId', options);

/**
 * Get market index group
 * Get a market index group by id
 */
export const getV3MarketsGroupsGroupIdOptions = (options: Options<GetV3MarketsGroupsGroupIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsGroupsGroupId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsGroupsGroupIdQueryKey(options)
    });
};

/**
 * Update market index group
 * Update the specified market index group
 */
export const patchV3MarketsGroupsGroupIdMutation = (options?: Partial<Options<PatchV3MarketsGroupsGroupIdData>>): UseMutationOptions<PatchV3MarketsGroupsGroupIdResponse, DefaultError, Options<PatchV3MarketsGroupsGroupIdData>> => {
    const mutationOptions: UseMutationOptions<PatchV3MarketsGroupsGroupIdResponse, DefaultError, Options<PatchV3MarketsGroupsGroupIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchV3MarketsGroupsGroupId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV3MarketsGroupsGroupIdConstituentsQueryKey = (options: Options<GetV3MarketsGroupsGroupIdConstituentsData>) => createQueryKey('getV3MarketsGroupsGroupIdConstituents', options);

/**
 * Get market index group constituents
 * Get a list of the constituent indexes in this market index group
 */
export const getV3MarketsGroupsGroupIdConstituentsOptions = (options: Options<GetV3MarketsGroupsGroupIdConstituentsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsGroupsGroupIdConstituents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsGroupsGroupIdConstituentsQueryKey(options)
    });
};

export const getV3MarketsGroupsGroupIdConstituentsInfiniteQueryKey = (options: Options<GetV3MarketsGroupsGroupIdConstituentsData>): QueryKey<Options<GetV3MarketsGroupsGroupIdConstituentsData>> => createQueryKey('getV3MarketsGroupsGroupIdConstituents', options, true);

/**
 * Get market index group constituents
 * Get a list of the constituent indexes in this market index group
 */
export const getV3MarketsGroupsGroupIdConstituentsInfiniteOptions = (options: Options<GetV3MarketsGroupsGroupIdConstituentsData>) => {
    return infiniteQueryOptions<GetV3MarketsGroupsGroupIdConstituentsResponse, DefaultError, InfiniteData<GetV3MarketsGroupsGroupIdConstituentsResponse>, QueryKey<Options<GetV3MarketsGroupsGroupIdConstituentsData>>, string | Pick<QueryKey<Options<GetV3MarketsGroupsGroupIdConstituentsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV3MarketsGroupsGroupIdConstituentsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    cursor: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV3MarketsGroupsGroupIdConstituents({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsGroupsGroupIdConstituentsInfiniteQueryKey(options)
    });
};

/**
 * Add a market index constituent
 * Add the specified market index as a new constituent of the group
 */
export const postV3MarketsGroupsGroupIdConstituentsMutation = (options?: Partial<Options<PostV3MarketsGroupsGroupIdConstituentsData>>): UseMutationOptions<PostV3MarketsGroupsGroupIdConstituentsResponse, DefaultError, Options<PostV3MarketsGroupsGroupIdConstituentsData>> => {
    const mutationOptions: UseMutationOptions<PostV3MarketsGroupsGroupIdConstituentsResponse, DefaultError, Options<PostV3MarketsGroupsGroupIdConstituentsData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await postV3MarketsGroupsGroupIdConstituents({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV3MarketsIndexesQueryKey = (options?: Options<GetV3MarketsIndexesData>) => createQueryKey('getV3MarketsIndexes', options);

/**
 * Paginate market indexes
 * Paginate through all market indexes using requested filters
 */
export const getV3MarketsIndexesOptions = (options?: Options<GetV3MarketsIndexesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsIndexes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesQueryKey(options)
    });
};

export const getV3MarketsIndexesInfiniteQueryKey = (options?: Options<GetV3MarketsIndexesData>): QueryKey<Options<GetV3MarketsIndexesData>> => createQueryKey('getV3MarketsIndexes', options, true);

/**
 * Paginate market indexes
 * Paginate through all market indexes using requested filters
 */
export const getV3MarketsIndexesInfiniteOptions = (options?: Options<GetV3MarketsIndexesData>) => {
    return infiniteQueryOptions<GetV3MarketsIndexesResponse, DefaultError, InfiniteData<GetV3MarketsIndexesResponse>, QueryKey<Options<GetV3MarketsIndexesData>>, string | Pick<QueryKey<Options<GetV3MarketsIndexesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV3MarketsIndexesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    cursor: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV3MarketsIndexes({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesInfiniteQueryKey(options)
    });
};

/**
 * Delete a market index
 * Deletes the specified market index
 */
export const deleteV3MarketsIndexesIndexIdMutation = (options?: Partial<Options<DeleteV3MarketsIndexesIndexIdData>>): UseMutationOptions<DeleteV3MarketsIndexesIndexIdResponse, DefaultError, Options<DeleteV3MarketsIndexesIndexIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteV3MarketsIndexesIndexIdResponse, DefaultError, Options<DeleteV3MarketsIndexesIndexIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteV3MarketsIndexesIndexId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV3MarketsIndexesIndexIdQueryKey = (options: Options<GetV3MarketsIndexesIndexIdData>) => createQueryKey('getV3MarketsIndexesIndexId', options);

/**
 * Get market index
 * Get a market index by id
 */
export const getV3MarketsIndexesIndexIdOptions = (options: Options<GetV3MarketsIndexesIndexIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsIndexesIndexId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdQueryKey(options)
    });
};

/**
 * Update a market index
 * Update the specified market index
 */
export const patchV3MarketsIndexesIndexIdMutation = (options?: Partial<Options<PatchV3MarketsIndexesIndexIdData>>): UseMutationOptions<PatchV3MarketsIndexesIndexIdResponse, DefaultError, Options<PatchV3MarketsIndexesIndexIdData>> => {
    const mutationOptions: UseMutationOptions<PatchV3MarketsIndexesIndexIdResponse, DefaultError, Options<PatchV3MarketsIndexesIndexIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await patchV3MarketsIndexesIndexId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV3MarketsIndexesIndexIdCompaniesQueryKey = (options: Options<GetV3MarketsIndexesIndexIdCompaniesData>) => createQueryKey('getV3MarketsIndexesIndexIdCompanies', options);

/**
 * Get market index constituents
 * Get a list of the companies in this market index
 */
export const getV3MarketsIndexesIndexIdCompaniesOptions = (options: Options<GetV3MarketsIndexesIndexIdCompaniesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsIndexesIndexIdCompanies({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdCompaniesQueryKey(options)
    });
};

export const getV3MarketsIndexesIndexIdCompaniesInfiniteQueryKey = (options: Options<GetV3MarketsIndexesIndexIdCompaniesData>): QueryKey<Options<GetV3MarketsIndexesIndexIdCompaniesData>> => createQueryKey('getV3MarketsIndexesIndexIdCompanies', options, true);

/**
 * Get market index constituents
 * Get a list of the companies in this market index
 */
export const getV3MarketsIndexesIndexIdCompaniesInfiniteOptions = (options: Options<GetV3MarketsIndexesIndexIdCompaniesData>) => {
    return infiniteQueryOptions<GetV3MarketsIndexesIndexIdCompaniesResponse, DefaultError, InfiniteData<GetV3MarketsIndexesIndexIdCompaniesResponse>, QueryKey<Options<GetV3MarketsIndexesIndexIdCompaniesData>>, string | Pick<QueryKey<Options<GetV3MarketsIndexesIndexIdCompaniesData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV3MarketsIndexesIndexIdCompaniesData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    cursor: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV3MarketsIndexesIndexIdCompanies({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdCompaniesInfiniteQueryKey(options)
    });
};

export const getV3MarketsIndexesIndexIdAssetsClimateScoresQueryKey = (options: Options<GetV3MarketsIndexesIndexIdAssetsClimateScoresData>) => createQueryKey('getV3MarketsIndexesIndexIdAssetsClimateScores', options);

/**
 * Get market index assets climate scores
 * Get climate risk scores for all assets owned by this market index
 */
export const getV3MarketsIndexesIndexIdAssetsClimateScoresOptions = (options: Options<GetV3MarketsIndexesIndexIdAssetsClimateScoresData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsIndexesIndexIdAssetsClimateScores({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdAssetsClimateScoresQueryKey(options)
    });
};

export const getV3MarketsIndexesIndexIdAssetsClimateScoresInfiniteQueryKey = (options: Options<GetV3MarketsIndexesIndexIdAssetsClimateScoresData>): QueryKey<Options<GetV3MarketsIndexesIndexIdAssetsClimateScoresData>> => createQueryKey('getV3MarketsIndexesIndexIdAssetsClimateScores', options, true);

/**
 * Get market index assets climate scores
 * Get climate risk scores for all assets owned by this market index
 */
export const getV3MarketsIndexesIndexIdAssetsClimateScoresInfiniteOptions = (options: Options<GetV3MarketsIndexesIndexIdAssetsClimateScoresData>) => {
    return infiniteQueryOptions<GetV3MarketsIndexesIndexIdAssetsClimateScoresResponse, DefaultError, InfiniteData<GetV3MarketsIndexesIndexIdAssetsClimateScoresResponse>, QueryKey<Options<GetV3MarketsIndexesIndexIdAssetsClimateScoresData>>, string | Pick<QueryKey<Options<GetV3MarketsIndexesIndexIdAssetsClimateScoresData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV3MarketsIndexesIndexIdAssetsClimateScoresData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    cursor: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV3MarketsIndexesIndexIdAssetsClimateScores({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdAssetsClimateScoresInfiniteQueryKey(options)
    });
};

export const getV3MarketsIndexesIndexIdAssetsClimateImpactsQueryKey = (options: Options<GetV3MarketsIndexesIndexIdAssetsClimateImpactsData>) => createQueryKey('getV3MarketsIndexesIndexIdAssetsClimateImpacts', options);

/**
 * Get market index assets climate impacts
 * Get climate risk impacts for all assets owned by this market index
 */
export const getV3MarketsIndexesIndexIdAssetsClimateImpactsOptions = (options: Options<GetV3MarketsIndexesIndexIdAssetsClimateImpactsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsIndexesIndexIdAssetsClimateImpacts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdAssetsClimateImpactsQueryKey(options)
    });
};

export const getV3MarketsIndexesIndexIdAssetsClimateImpactsInfiniteQueryKey = (options: Options<GetV3MarketsIndexesIndexIdAssetsClimateImpactsData>): QueryKey<Options<GetV3MarketsIndexesIndexIdAssetsClimateImpactsData>> => createQueryKey('getV3MarketsIndexesIndexIdAssetsClimateImpacts', options, true);

/**
 * Get market index assets climate impacts
 * Get climate risk impacts for all assets owned by this market index
 */
export const getV3MarketsIndexesIndexIdAssetsClimateImpactsInfiniteOptions = (options: Options<GetV3MarketsIndexesIndexIdAssetsClimateImpactsData>) => {
    return infiniteQueryOptions<GetV3MarketsIndexesIndexIdAssetsClimateImpactsResponse, DefaultError, InfiniteData<GetV3MarketsIndexesIndexIdAssetsClimateImpactsResponse>, QueryKey<Options<GetV3MarketsIndexesIndexIdAssetsClimateImpactsData>>, string | Pick<QueryKey<Options<GetV3MarketsIndexesIndexIdAssetsClimateImpactsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV3MarketsIndexesIndexIdAssetsClimateImpactsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    cursor: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV3MarketsIndexesIndexIdAssetsClimateImpacts({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdAssetsClimateImpactsInfiniteQueryKey(options)
    });
};

export const getV3MarketsIndexesIndexIdAssetsClimateScoresAggregationQueryKey = (options: Options<GetV3MarketsIndexesIndexIdAssetsClimateScoresAggregationData>) => createQueryKey('getV3MarketsIndexesIndexIdAssetsClimateScoresAggregation', options);

/**
 * Get market index asset climate scores aggregation
 * Aggregate the climate risk scores of this market index by some property
 */
export const getV3MarketsIndexesIndexIdAssetsClimateScoresAggregationOptions = (options: Options<GetV3MarketsIndexesIndexIdAssetsClimateScoresAggregationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsIndexesIndexIdAssetsClimateScoresAggregation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdAssetsClimateScoresAggregationQueryKey(options)
    });
};

export const getV3MarketsIndexesIndexIdAssetsClimateImpactsAggregationQueryKey = (options: Options<GetV3MarketsIndexesIndexIdAssetsClimateImpactsAggregationData>) => createQueryKey('getV3MarketsIndexesIndexIdAssetsClimateImpactsAggregation', options);

/**
 * Get market index asset climate impacts aggregation
 * Aggregate the climate risk impacts of this market index by some property
 */
export const getV3MarketsIndexesIndexIdAssetsClimateImpactsAggregationOptions = (options: Options<GetV3MarketsIndexesIndexIdAssetsClimateImpactsAggregationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsIndexesIndexIdAssetsClimateImpactsAggregation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdAssetsClimateImpactsAggregationQueryKey(options)
    });
};

export const getV3MarketsIndexesIndexIdAssetsClimateScoresHistogramQueryKey = (options: Options<GetV3MarketsIndexesIndexIdAssetsClimateScoresHistogramData>) => createQueryKey('getV3MarketsIndexesIndexIdAssetsClimateScoresHistogram', options);

/**
 * Get market index asset climate scores histogram
 * Distribute the climate scores of the assets owned by this market index into bins to create a histogram. The number of bins is supplied by the 'bins' parameter
 *
 * The bin width is calculated from the number of bins by creating equal thresholds from `0.0` to `1.0`. Metrics such as VAR that go above `1.0` will be placed into the last bin.
 *
 * Only the first metric supplied in the `metrics` parameter is used in the histogram.
 *
 * The `bin_index` in the response will range from `1` to the number of bins.
 */
export const getV3MarketsIndexesIndexIdAssetsClimateScoresHistogramOptions = (options: Options<GetV3MarketsIndexesIndexIdAssetsClimateScoresHistogramData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsIndexesIndexIdAssetsClimateScoresHistogram({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdAssetsClimateScoresHistogramQueryKey(options)
    });
};

export const getV3MarketsIndexesIndexIdClimateScoresQueryKey = (options: Options<GetV3MarketsIndexesIndexIdClimateScoresData>) => createQueryKey('getV3MarketsIndexesIndexIdClimateScores', options);

/**
 * Get market index climate scores
 * Get the aggregate climate risk score of this market index
 */
export const getV3MarketsIndexesIndexIdClimateScoresOptions = (options: Options<GetV3MarketsIndexesIndexIdClimateScoresData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsIndexesIndexIdClimateScores({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdClimateScoresQueryKey(options)
    });
};

export const getV3MarketsIndexesIndexIdClimateImpactsQueryKey = (options: Options<GetV3MarketsIndexesIndexIdClimateImpactsData>) => createQueryKey('getV3MarketsIndexesIndexIdClimateImpacts', options);

/**
 * Get market index climate impacts
 * Get the aggregate climate risk impacts of this market index
 */
export const getV3MarketsIndexesIndexIdClimateImpactsOptions = (options: Options<GetV3MarketsIndexesIndexIdClimateImpactsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsIndexesIndexIdClimateImpacts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdClimateImpactsQueryKey(options)
    });
};

export const getV3MarketsIndexesIndexIdCompaniesClimateScoresQueryKey = (options: Options<GetV3MarketsIndexesIndexIdCompaniesClimateScoresData>) => createQueryKey('getV3MarketsIndexesIndexIdCompaniesClimateScores', options);

/**
 * Get market index company climate scores
 * Get climate risk scores for all companies owned by this market index
 */
export const getV3MarketsIndexesIndexIdCompaniesClimateScoresOptions = (options: Options<GetV3MarketsIndexesIndexIdCompaniesClimateScoresData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsIndexesIndexIdCompaniesClimateScores({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdCompaniesClimateScoresQueryKey(options)
    });
};

export const getV3MarketsIndexesIndexIdCompaniesClimateScoresInfiniteQueryKey = (options: Options<GetV3MarketsIndexesIndexIdCompaniesClimateScoresData>): QueryKey<Options<GetV3MarketsIndexesIndexIdCompaniesClimateScoresData>> => createQueryKey('getV3MarketsIndexesIndexIdCompaniesClimateScores', options, true);

/**
 * Get market index company climate scores
 * Get climate risk scores for all companies owned by this market index
 */
export const getV3MarketsIndexesIndexIdCompaniesClimateScoresInfiniteOptions = (options: Options<GetV3MarketsIndexesIndexIdCompaniesClimateScoresData>) => {
    return infiniteQueryOptions<GetV3MarketsIndexesIndexIdCompaniesClimateScoresResponse, DefaultError, InfiniteData<GetV3MarketsIndexesIndexIdCompaniesClimateScoresResponse>, QueryKey<Options<GetV3MarketsIndexesIndexIdCompaniesClimateScoresData>>, string | Pick<QueryKey<Options<GetV3MarketsIndexesIndexIdCompaniesClimateScoresData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV3MarketsIndexesIndexIdCompaniesClimateScoresData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    cursor: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV3MarketsIndexesIndexIdCompaniesClimateScores({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdCompaniesClimateScoresInfiniteQueryKey(options)
    });
};

export const getV3MarketsIndexesIndexIdCompaniesClimateImpactsQueryKey = (options: Options<GetV3MarketsIndexesIndexIdCompaniesClimateImpactsData>) => createQueryKey('getV3MarketsIndexesIndexIdCompaniesClimateImpacts', options);

/**
 * Get market index company climate impacts
 * Get climate risk impacts for all companies owned by this market index
 */
export const getV3MarketsIndexesIndexIdCompaniesClimateImpactsOptions = (options: Options<GetV3MarketsIndexesIndexIdCompaniesClimateImpactsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsIndexesIndexIdCompaniesClimateImpacts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdCompaniesClimateImpactsQueryKey(options)
    });
};

export const getV3MarketsIndexesIndexIdCompaniesClimateImpactsInfiniteQueryKey = (options: Options<GetV3MarketsIndexesIndexIdCompaniesClimateImpactsData>): QueryKey<Options<GetV3MarketsIndexesIndexIdCompaniesClimateImpactsData>> => createQueryKey('getV3MarketsIndexesIndexIdCompaniesClimateImpacts', options, true);

/**
 * Get market index company climate impacts
 * Get climate risk impacts for all companies owned by this market index
 */
export const getV3MarketsIndexesIndexIdCompaniesClimateImpactsInfiniteOptions = (options: Options<GetV3MarketsIndexesIndexIdCompaniesClimateImpactsData>) => {
    return infiniteQueryOptions<GetV3MarketsIndexesIndexIdCompaniesClimateImpactsResponse, DefaultError, InfiniteData<GetV3MarketsIndexesIndexIdCompaniesClimateImpactsResponse>, QueryKey<Options<GetV3MarketsIndexesIndexIdCompaniesClimateImpactsData>>, string | Pick<QueryKey<Options<GetV3MarketsIndexesIndexIdCompaniesClimateImpactsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV3MarketsIndexesIndexIdCompaniesClimateImpactsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    cursor: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV3MarketsIndexesIndexIdCompaniesClimateImpacts({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdCompaniesClimateImpactsInfiniteQueryKey(options)
    });
};

export const getV3MarketsIndexesIndexIdAssetsQueryKey = (options: Options<GetV3MarketsIndexesIndexIdAssetsData>) => createQueryKey('getV3MarketsIndexesIndexIdAssets', options);

/**
 * Paginate market index assets
 * Paginate the assets for all companies in the market index
 */
export const getV3MarketsIndexesIndexIdAssetsOptions = (options: Options<GetV3MarketsIndexesIndexIdAssetsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsIndexesIndexIdAssets({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdAssetsQueryKey(options)
    });
};

export const getV3MarketsIndexesIndexIdAssetsInfiniteQueryKey = (options: Options<GetV3MarketsIndexesIndexIdAssetsData>): QueryKey<Options<GetV3MarketsIndexesIndexIdAssetsData>> => createQueryKey('getV3MarketsIndexesIndexIdAssets', options, true);

/**
 * Paginate market index assets
 * Paginate the assets for all companies in the market index
 */
export const getV3MarketsIndexesIndexIdAssetsInfiniteOptions = (options: Options<GetV3MarketsIndexesIndexIdAssetsData>) => {
    return infiniteQueryOptions<GetV3MarketsIndexesIndexIdAssetsResponse, DefaultError, InfiniteData<GetV3MarketsIndexesIndexIdAssetsResponse>, QueryKey<Options<GetV3MarketsIndexesIndexIdAssetsData>>, string | Pick<QueryKey<Options<GetV3MarketsIndexesIndexIdAssetsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<GetV3MarketsIndexesIndexIdAssetsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    cursor: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await getV3MarketsIndexesIndexIdAssets({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdAssetsInfiniteQueryKey(options)
    });
};

export const getV3MarketsIndexesIndexIdAssetsAggregationQueryKey = (options: Options<GetV3MarketsIndexesIndexIdAssetsAggregationData>) => createQueryKey('getV3MarketsIndexesIndexIdAssetsAggregation', options);

/**
 * Get market index assets aggregation
 * Aggregate the assets of this market index by the requested property
 */
export const getV3MarketsIndexesIndexIdAssetsAggregationOptions = (options: Options<GetV3MarketsIndexesIndexIdAssetsAggregationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsIndexesIndexIdAssetsAggregation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdAssetsAggregationQueryKey(options)
    });
};

/**
 * Remove a subsidiary
 * Use identifier (`company_id` and `subsidiary_id`)  to delete the subsidiary. The endpoint is active only for authorized users.
 */
export const deleteV3CompaniesCompanyIdSubsidiariesSubsidiaryIdMutation = (options?: Partial<Options<DeleteV3CompaniesCompanyIdSubsidiariesSubsidiaryIdData>>): UseMutationOptions<DeleteV3CompaniesCompanyIdSubsidiariesSubsidiaryIdResponse, DefaultError, Options<DeleteV3CompaniesCompanyIdSubsidiariesSubsidiaryIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteV3CompaniesCompanyIdSubsidiariesSubsidiaryIdResponse, DefaultError, Options<DeleteV3CompaniesCompanyIdSubsidiariesSubsidiaryIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteV3CompaniesCompanyIdSubsidiariesSubsidiaryId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

/**
 * Remove a constituent
 * Remove the constituent index from the market index group
 */
export const deleteV3MarketsGroupsGroupIdConstituentsIndexIdMutation = (options?: Partial<Options<DeleteV3MarketsGroupsGroupIdConstituentsIndexIdData>>): UseMutationOptions<DeleteV3MarketsGroupsGroupIdConstituentsIndexIdResponse, DefaultError, Options<DeleteV3MarketsGroupsGroupIdConstituentsIndexIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteV3MarketsGroupsGroupIdConstituentsIndexIdResponse, DefaultError, Options<DeleteV3MarketsGroupsGroupIdConstituentsIndexIdData>> = {
        mutationFn: async (fnOptions) => {
            const { data } = await deleteV3MarketsGroupsGroupIdConstituentsIndexId({
                ...options,
                ...fnOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getV3MarketsGroupsSearchQueryKey = (options?: Options<GetV3MarketsGroupsSearchData>) => createQueryKey('getV3MarketsGroupsSearch', options);

/**
 * Search for market groups
 * Search for market groups by name
 */
export const getV3MarketsGroupsSearchOptions = (options?: Options<GetV3MarketsGroupsSearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsGroupsSearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsGroupsSearchQueryKey(options)
    });
};

export const getV3MarketsIndexesSearchQueryKey = (options?: Options<GetV3MarketsIndexesSearchData>) => createQueryKey('getV3MarketsIndexesSearch', options);

/**
 * Search for market indexes
 * Search for market indexes by name
 */
export const getV3MarketsIndexesSearchOptions = (options?: Options<GetV3MarketsIndexesSearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsIndexesSearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesSearchQueryKey(options)
    });
};

export const getV3CompaniesCompanyIdGeoClustersQueryKey = (options: Options<GetV3CompaniesCompanyIdGeoClustersData>) => createQueryKey('getV3CompaniesCompanyIdGeoClusters', options);

/**
 * Get asset geo clusters
 * For use in geospatial mapping. Clusters all assets of the company at the given zoom level, returning the location and count of assets for each cluster.
 *
 * Reference zoom levels:
 * Zoom Levels 0-5: World to continent scale.
 * Zoom Levels 6-9: Large regions or states.
 * Zoom Levels 10-13: Cities and towns.
 * Zoom Levels 14-18: Streets and individual buildings.
 * Zoom Levels 19-22: Very detailed street-level views (not all map providers offer data at this level).
 */
export const getV3CompaniesCompanyIdGeoClustersOptions = (options: Options<GetV3CompaniesCompanyIdGeoClustersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3CompaniesCompanyIdGeoClusters({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3CompaniesCompanyIdGeoClustersQueryKey(options)
    });
};

export const getV3MarketsIndexesIndexIdGeoClustersQueryKey = (options: Options<GetV3MarketsIndexesIndexIdGeoClustersData>) => createQueryKey('getV3MarketsIndexesIndexIdGeoClusters', options);

/**
 * Get asset geo clusters
 * For use in geospatial mapping. Clusters all assets of the companies at the given zoom level, returning the location and count of assets for each cluster.
 *
 * Reference zoom levels:
 * Zoom Levels 0-5: World to continent scale.
 * Zoom Levels 6-9: Large regions or states.
 * Zoom Levels 10-13: Cities and towns.
 * Zoom Levels 14-18: Streets and individual buildings.
 * Zoom Levels 19-22: Very detailed street-level views (not all map providers offer data at this level).
 */
export const getV3MarketsIndexesIndexIdGeoClustersOptions = (options: Options<GetV3MarketsIndexesIndexIdGeoClustersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsIndexesIndexIdGeoClusters({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdGeoClustersQueryKey(options)
    });
};

export const v3GetMarketsIndexesIndexIdCompaniesClimateScoresHistogramQueryKey = (options: Options<V3GetMarketsIndexesIndexIdCompaniesClimateScoresHistogramData>) => createQueryKey('v3GetMarketsIndexesIndexIdCompaniesClimateScoresHistogram', options);

/**
 * Get market companies climate score histogram
 */
export const v3GetMarketsIndexesIndexIdCompaniesClimateScoresHistogramOptions = (options: Options<V3GetMarketsIndexesIndexIdCompaniesClimateScoresHistogramData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await v3GetMarketsIndexesIndexIdCompaniesClimateScoresHistogram({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: v3GetMarketsIndexesIndexIdCompaniesClimateScoresHistogramQueryKey(options)
    });
};

export const getV3MarketsIndexesIndexIdCompaniesAggregationQueryKey = (options: Options<GetV3MarketsIndexesIndexIdCompaniesAggregationData>) => createQueryKey('getV3MarketsIndexesIndexIdCompaniesAggregation', options);

/**
 * Get market index companies aggregation
 * Aggregate the companies in the market index
 */
export const getV3MarketsIndexesIndexIdCompaniesAggregationOptions = (options: Options<GetV3MarketsIndexesIndexIdCompaniesAggregationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3MarketsIndexesIndexIdCompaniesAggregation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3MarketsIndexesIndexIdCompaniesAggregationQueryKey(options)
    });
};

export const getV3AssetsSearchQueryKey = (options?: Options<GetV3AssetsSearchData>) => createQueryKey('getV3AssetsSearch', options);

/**
 * Search for assets
 * Use identifier (`scope`) to search for assets.
 */
export const getV3AssetsSearchOptions = (options?: Options<GetV3AssetsSearchData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getV3AssetsSearch({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getV3AssetsSearchQueryKey(options)
    });
};
