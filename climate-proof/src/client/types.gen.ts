// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'https://api.riskthinking.ai' | (string & {});
};

/**
 * Asset
 * Asset model
 */
export type Asset = {
    id?: string;
    hex_id?: string;
    country?: string;
    building_footprint?: number;
    address?: string;
    asset_value?: number;
    created_at?: string;
    updated_at?: string;
    latitude?: number;
    longitude?: number;
    asset_type?: string;
    city?: string;
    materiality_score?: number;
    ipcc_region?: string;
    state?: string;
};

export type ClimateRiskScore = {
    dcr_score?: number;
    expected_impact?: number;
    cvar_50?: number;
    cvar_95?: number;
    cvar_99?: number;
    var_50?: number;
    var_95?: number;
    var_99?: number;
};

/**
 * Index Impact
 * Index impact model
 */
export type IndexImpact = {
    index_name?: string;
    index_impact_50?: number;
    index_attribution_50?: number;
    index_impact_95?: number;
    index_attribution_95?: number;
    index_impact_99?: number;
    index_attribution_99?: number;
};

/**
 * Company
 * Company model
 */
export type Company = {
    id?: string;
    slug?: string;
    name?: string;
    sector?: string;
    annual_revenue?: number;
    created_at?: string;
    updated_at?: string;
    headquarters_country?: string;
    headquarters_address?: string;
    market_cap?: number;
    isin_codes?: Array<string>;
    lei_code?: string;
    figi_codes?: Array<string>;
    cik_code?: string;
    stock_tickers?: Array<string>;
    organization_id?: string | null;
    is_grandparent?: boolean;
    data_generated_at?: string;
    data_generation_status?: string;
};

/**
 * Asset Pagination
 * Asset pagination model
 */
export type AssetPagination = {
    results?: Array<Asset & {
        /**
         * Company ID which owns this asset
         */
        subsidiary_id?: string;
    }>;
    pagination?: {
        cursor?: string;
        count?: number;
        last_page?: boolean;
    };
};

/**
 * Company Pagination
 * Company pagination model
 */
export type CompanyPagination = {
    results?: Array<Company>;
    pagination?: {
        cursor?: string;
        count?: number;
        last_page?: boolean;
    };
};

/**
 * Market Index Pagination
 * Market index pagination model
 */
export type MarketIndexPagination = {
    results?: Array<MarketIndex>;
    pagination?: {
        cursor?: string;
        count?: number;
        last_page?: boolean;
    };
};

/**
 * Market Index Group Pagination
 * Market index group pagination model
 */
export type MarketIndexGroupPagination = {
    results?: Array<MarketIndexGroup>;
    pagination?: {
        cursor?: string;
        count?: number;
        last_page?: boolean;
    };
};

/**
 * Score Pagination
 * Score pagination model
 */
export type ScorePagination = {
    results?: Array<ClimateRiskScore & {
        asset_id?: string;
        asset_type?: string;
        country?: string;
        city?: string;
        address?: string;
    }>;
    pagination?: {
        cursor?: string;
        count?: number;
        last_page?: boolean;
    };
};

/**
 * Score Company Pagination
 * Score company pagination model
 */
export type ScoreCompanyPagination = {
    results?: Array<ClimateRiskScore & {
        company_id?: string;
        sector?: string;
        asset_count?: number;
    }>;
    pagination?: {
        cursor?: string;
        count?: number;
        last_page?: boolean;
    };
};

/**
 * Impact Pagination
 * Impact pagination model
 */
export type ImpactPagination = {
    results?: Array<{
        asset_id?: string;
    } & {
        index_risks?: Array<IndexImpact>;
    }>;
    pagination?: {
        cursor?: string;
        count?: number;
        last_page?: boolean;
    };
};

/**
 * Impact Company Pagination
 * Impact company pagination model
 */
export type ImpactCompanyPagination = {
    results?: Array<{
        company_id?: string;
        sector?: string;
        asset_count?: number;
    } & {
        index_risks?: Array<IndexImpact>;
    }>;
    pagination?: {
        cursor?: string;
        count?: number;
        last_page?: boolean;
    };
};

/**
 * Aggregates
 */
export type Aggregates = {
    country?: string;
} | {
    state?: string;
} | {
    asset_type?: string;
};

/**
 * Aggregates (Portfolio)
 */
export type AggregatesPortfolio = {
    country?: string;
} | {
    state?: string;
} | {
    asset_type?: string;
} | {
    sector?: string;
};

/**
 * Market-Index
 * Market index model
 */
export type MarketIndex = {
    id?: string;
    name?: string;
    sectors?: Array<string>;
    created_at?: string;
    updated_at?: string;
    organization_id?: string | null;
};

/**
 * Market-Index-Group
 * Market index group model
 */
export type MarketIndexGroup = {
    id?: string;
    name?: string;
    created_at?: string;
    updated_at?: string;
    organization_id?: string | null;
};

/**
 * Pagination cursor to request the next page
 */
export type Cursor = string;

/**
 * The number of results to return per page
 */
export type Limit = number;

/**
 * The forward-looking climate pathway used as the basis for the analytics
 */
export type Pathway = string;

/**
 * The future period of time (also called a climatology) used as the basis for the analytics
 */
export type Horizon = number;

/**
 * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
 */
export type Country = string;

/**
 * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
 */
export type State = string;

/**
 * The type of risk used as the basis for the analysis
 */
export type Risk = 'physical' | 'transition';

/**
 * Property to aggregate by
 */
export type By = 'country' | 'state' | 'asset_type';

/**
 * The multifactor statistic used as the basis for the analysis. Available values are dcr_score, expected_impact, cvar_50, cvar_95, cvar_99, var_50, var_95, var_99
 */
export type Metrics = string;

/**
 * Specifies a bounding box to filter locations within a defined geographic area. Provide four comma-separated values in the format: "min_longitude,min_latitude,max_longitude,max_latitude".
 */
export type Bbox = string;

/**
 * Group by the requested number of bins
 */
export type Bins = number;

/**
 * H3 hexagon ID supplied as a hex string
 */
export type HexId = string;

/**
 * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
 */
export type AssetType = string;

/**
 * Universally unique identifier (UUID) that distinctly identifies each company
 */
export type CompanyId = string;

/**
 * Universally unique identifier (UUID) that distinctly identifies each asset
 */
export type AssetId = string;

/**
 * Portfolio unique UUID
 */
export type PortfolioId = string;

/**
 * Market index group unique UUID
 */
export type GroupId = string;

/**
 * Market index unique UUID
 */
export type IndexId = string;

/**
 * GICS sector to filter by. Optionally supports comma-separated list
 */
export type Sector = string;

/**
 * Unique company UUID of the subsidiary
 */
export type SubsidiaryId = string;

/**
 * Defines the visibility and search boundary for the request. Use this parameter to control the breadth of the search context based on data accessibility and intended query scope.
 */
export type Scope = 'public' | 'organization' | 'company';

/**
 * The minimum requested risk range of the metric
 */
export type MinRisk = number;

/**
 * The maximum requested risk range of the metric
 */
export type MaxRisk = number;

/**
 * Shop order id
 */
export type OrderId = string;

/**
 * Asset function to filter by
 */
export type AssetFunction = string;

/**
 * Asset category to filter by
 */
export type AssetCategory = string;

/**
 * Sort direction
 */
export type SortDirection = 'ascending' | 'descending';

export type GetV3AssetsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Pagination cursor to request the next page
         */
        cursor?: string;
        /**
         * The number of results to return per page
         */
        limit?: number;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
    };
    url: '/v3/assets';
};

export type GetV3AssetsErrors = {
    /**
     * Standard error response
     */
    500: {
        error?: {
            message?: string;
            detail?: string;
            code?: number;
            status?: string;
            timestamp?: string;
        };
    };
};

export type GetV3AssetsError = GetV3AssetsErrors[keyof GetV3AssetsErrors];

export type GetV3AssetsResponses = {
    /**
     * Paginated response
     */
    200: AssetPagination;
};

export type GetV3AssetsResponse = GetV3AssetsResponses[keyof GetV3AssetsResponses];

export type DeleteV3AssetsAssetIdData = {
    body?: never;
    path: {
        /**
         * Universally unique identifier (UUID) that distinctly identifies each asset
         */
        asset_id: string;
    };
    query?: never;
    url: '/v3/assets/{asset_id}';
};

export type DeleteV3AssetsAssetIdResponses = {
    /**
     * Standard success response
     */
    200: {
        code?: number;
        status?: string;
        timestamp?: string;
    };
};

export type DeleteV3AssetsAssetIdResponse = DeleteV3AssetsAssetIdResponses[keyof DeleteV3AssetsAssetIdResponses];

export type GetV3AssetsAssetIdData = {
    body?: never;
    path: {
        /**
         * Universally unique identifier (UUID) that distinctly identifies each asset
         */
        asset_id: string;
    };
    query?: never;
    url: '/v3/assets/{asset_id}';
};

export type GetV3AssetsAssetIdErrors = {
    /**
     * Standard error response
     */
    '4XX': {
        error?: {
            message?: string;
            detail?: string;
            code?: number;
            status?: string;
            timestamp?: string;
        };
    };
    /**
     * Standard error response
     */
    '5XX': {
        error?: {
            message?: string;
            detail?: string;
            code?: number;
            status?: string;
            timestamp?: string;
        };
    };
};

export type GetV3AssetsAssetIdError = GetV3AssetsAssetIdErrors[keyof GetV3AssetsAssetIdErrors];

export type GetV3AssetsAssetIdResponses = {
    200: Asset;
};

export type GetV3AssetsAssetIdResponse = GetV3AssetsAssetIdResponses[keyof GetV3AssetsAssetIdResponses];

export type PatchV3AssetsAssetIdData = {
    /**
     * The request body must include the fields to be updated for the specified asset. Only updatable fields should be included. If updating the asset location, both `latitude` and `longitude` must be provided together. Partial updates with only one of the coordinates are not allowed.
     */
    body?: {
        country?: string | null;
        building_footprint?: number | null;
        address?: string | null;
        asset_value?: number | null;
        latitude?: number | null;
        longitude?: number | null;
        asset_type?: string | null;
        city?: string | null;
        state?: string | null;
    };
    path: {
        /**
         * Universally unique identifier (UUID) that distinctly identifies each asset
         */
        asset_id: string;
    };
    query?: never;
    url: '/v3/assets/{asset_id}';
};

export type PatchV3AssetsAssetIdResponses = {
    /**
     * OK
     */
    200: Asset;
};

export type PatchV3AssetsAssetIdResponse = PatchV3AssetsAssetIdResponses[keyof PatchV3AssetsAssetIdResponses];

export type GetV3AssetsAssetIdOwnershipData = {
    body?: never;
    path: {
        /**
         * Universally unique identifier (UUID) that distinctly identifies each asset
         */
        asset_id: string;
    };
    query?: never;
    url: '/v3/assets/{asset_id}/ownership';
};

export type GetV3AssetsAssetIdOwnershipResponses = {
    /**
     * OK
     */
    200: Company;
};

export type GetV3AssetsAssetIdOwnershipResponse = GetV3AssetsAssetIdOwnershipResponses[keyof GetV3AssetsAssetIdOwnershipResponses];

export type DeleteV3CompaniesCompanyIdData = {
    body?: never;
    path: {
        /**
         * Universally unique identifier (UUID) that distinctly identifies each company
         */
        company_id: string;
    };
    query?: never;
    url: '/v3/companies/{company_id}';
};

export type DeleteV3CompaniesCompanyIdResponses = {
    /**
     * Standard success response
     */
    200: {
        code?: number;
        status?: string;
        timestamp?: string;
    };
};

export type DeleteV3CompaniesCompanyIdResponse = DeleteV3CompaniesCompanyIdResponses[keyof DeleteV3CompaniesCompanyIdResponses];

export type GetV3CompaniesIdData = {
    body?: never;
    path: {
        /**
         * Universally unique identifier (UUID) that distinctly identifies each company
         */
        company_id: string;
    };
    query?: never;
    url: '/v3/companies/{company_id}';
};

export type GetV3CompaniesIdResponses = {
    200: Company;
};

export type GetV3CompaniesIdResponse = GetV3CompaniesIdResponses[keyof GetV3CompaniesIdResponses];

export type PatchV3CompaniesCompanyIdData = {
    body?: {
        name?: string | null;
        sector?: string | null;
        annual_revenue?: number | null;
        headquarters_country?: string | null;
        market_cap?: number | null;
        isin_codes?: Array<string> | null;
        lei_code?: string | null;
        figi_codes?: Array<string> | null;
        cik_code?: string | null;
        stock_tickers?: Array<string> | null;
    };
    path: {
        /**
         * Universally unique identifier (UUID) that distinctly identifies each company
         */
        company_id: string;
    };
    query?: never;
    url: '/v3/companies/{company_id}';
};

export type PatchV3CompaniesCompanyIdResponses = {
    /**
     * OK
     */
    200: Company;
};

export type PatchV3CompaniesCompanyIdResponse = PatchV3CompaniesCompanyIdResponses[keyof PatchV3CompaniesCompanyIdResponses];

export type GetV3CompaniesCompanyIdClimateScoresData = {
    body?: never;
    path: {
        /**
         * Universally unique identifier (UUID) that distinctly identifies each company
         */
        company_id: string;
    };
    query?: {
        /**
         * The type of risk used as the basis for the analysis
         */
        risk?: 'physical' | 'transition';
        /**
         * The forward-looking climate pathway used as the basis for the analytics
         */
        pathway?: string;
        /**
         * The future period of time (also called a climatology) used as the basis for the analytics
         */
        horizon?: number;
        /**
         * The multifactor statistic used as the basis for the analysis. Available values are dcr_score, expected_impact, cvar_50, cvar_95, cvar_99, var_50, var_95, var_99
         */
        metric?: string;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
    };
    url: '/v3/companies/{company_id}/climate/scores';
};

export type GetV3CompaniesCompanyIdClimateScoresResponses = {
    200: ClimateRiskScore;
};

export type GetV3CompaniesCompanyIdClimateScoresResponse = GetV3CompaniesCompanyIdClimateScoresResponses[keyof GetV3CompaniesCompanyIdClimateScoresResponses];

export type GetV3CompaniesCompanyIdClimateImpactsData = {
    body?: never;
    path: {
        /**
         * Universally unique identifier (UUID) that distinctly identifies each company
         */
        company_id: string;
    };
    query?: {
        /**
         * The type of risk used as the basis for the analysis
         */
        risk?: 'physical' | 'transition';
        /**
         * The forward-looking climate pathway used as the basis for the analytics
         */
        pathway?: string;
        /**
         * The future period of time (also called a climatology) used as the basis for the analytics
         */
        horizon?: number;
        /**
         * The multifactor statistic used as the basis for the analysis. Available values are dcr_score, expected_impact, cvar_50, cvar_95, cvar_99, var_50, var_95, var_99
         */
        metric?: string;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
    };
    url: '/v3/companies/{company_id}/climate/impacts';
};

export type GetV3CompaniesCompanyIdClimateImpactsResponses = {
    /**
     * OK
     */
    200: {
        results?: Array<IndexImpact>;
    };
};

export type GetV3CompaniesCompanyIdClimateImpactsResponse = GetV3CompaniesCompanyIdClimateImpactsResponses[keyof GetV3CompaniesCompanyIdClimateImpactsResponses];

export type GetV3CompaniesCompanyIdAssetsData = {
    body?: never;
    path: {
        /**
         * Universally unique identifier (UUID) that distinctly identifies each company
         */
        company_id: string;
    };
    query?: {
        /**
         * Pagination cursor to request the next page
         */
        cursor?: string;
        /**
         * The number of results to return per page
         */
        limit?: number;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
        /**
         * Sort by
         */
        sort_by?: 'asset_type' | 'country' | 'state' | 'address' | 'city' | 'latitude' | 'longitude';
        /**
         * Sort direction
         */
        sort_direction?: 'ascending' | 'descending';
    };
    url: '/v3/companies/{company_id}/assets';
};

export type GetV3CompaniesCompanyIdAssetsResponses = {
    200: AssetPagination;
};

export type GetV3CompaniesCompanyIdAssetsResponse = GetV3CompaniesCompanyIdAssetsResponses[keyof GetV3CompaniesCompanyIdAssetsResponses];

export type GetV3CompaniesCompanyIdAssetsLocationsData = {
    body?: never;
    path: {
        /**
         * Universally unique identifier (UUID) that distinctly identifies each company
         */
        company_id: string;
    };
    query?: {
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * Specifies a bounding box to filter locations within a defined geographic area. Provide four comma-separated values in the format: "min_longitude,min_latitude,max_longitude,max_latitude".
         */
        bbox?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
        /**
         * Asset function to filter by
         */
        asset_function?: string;
        /**
         * Asset category to filter by
         */
        asset_category?: string;
    };
    url: '/v3/companies/{company_id}/assets/locations';
};

export type GetV3CompaniesCompanyIdAssetsLocationsResponses = {
    200: {
        results?: Array<{
            asset_id?: string;
            latitude?: number;
            longitude?: number;
            country?: string;
            hex_id?: string;
        }>;
    };
};

export type GetV3CompaniesCompanyIdAssetsLocationsResponse = GetV3CompaniesCompanyIdAssetsLocationsResponses[keyof GetV3CompaniesCompanyIdAssetsLocationsResponses];

export type GetV3CompaniesCompanyIdAssetsClimateScoresData = {
    body?: never;
    path: {
        /**
         * Universally unique identifier (UUID) that distinctly identifies each company
         */
        company_id: string;
    };
    query?: {
        /**
         * The type of risk used as the basis for the analysis
         */
        risk?: 'physical' | 'transition';
        /**
         * The forward-looking climate pathway used as the basis for the analytics
         */
        pathway?: string;
        /**
         * The future period of time (also called a climatology) used as the basis for the analytics
         */
        horizon?: number;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * Pagination cursor to request the next page
         */
        cursor?: string;
        /**
         * The number of results to return per page
         */
        limit?: number;
        /**
         * The multifactor statistic used as the basis for the analysis. Available values are dcr_score, expected_impact, cvar_50, cvar_95, cvar_99, var_50, var_95, var_99
         */
        metric?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
        /**
         * The minimum requested risk range of the metric
         */
        min_risk?: number;
        /**
         * The maximum requested risk range of the metric
         */
        max_risk?: number;
        /**
         * Sort by
         */
        sort_by?: 'id' | 'asset_type' | 'country' | 'state' | 'downside_likelihood' | 'expected_impact' | 'cvar_99' | 'cvar_95' | 'cvar_50' | 'var_50' | 'var_95' | 'var_99';
        /**
         * Sort direction
         */
        sort_direction?: 'ascending' | 'descending';
    };
    url: '/v3/companies/{company_id}/assets/climate/scores';
};

export type GetV3CompaniesCompanyIdAssetsClimateScoresResponses = {
    /**
     * OK
     */
    200: ScorePagination;
};

export type GetV3CompaniesCompanyIdAssetsClimateScoresResponse = GetV3CompaniesCompanyIdAssetsClimateScoresResponses[keyof GetV3CompaniesCompanyIdAssetsClimateScoresResponses];

export type GetV3CompaniesCompanyIdAssetsClimateScoresAggregationData = {
    body?: never;
    path: {
        /**
         * Universally unique identifier (UUID) that distinctly identifies each company
         */
        company_id: string;
    };
    query?: {
        /**
         * The forward-looking climate pathway used as the basis for the analytics
         */
        pathway?: string;
        /**
         * The future period of time (also called a climatology) used as the basis for the analytics
         */
        horizon?: number;
        /**
         * The type of risk used as the basis for the analysis
         */
        risk?: 'physical' | 'transition';
        /**
         * Property to aggregate by
         */
        by?: 'country' | 'state' | 'asset_type';
        /**
         * The multifactor statistic used as the basis for the analysis. Available values are dcr_score, expected_impact, cvar_50, cvar_95, cvar_99, var_50, var_95, var_99
         */
        metric?: string;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
    };
    url: '/v3/companies/{company_id}/assets/climate/scores/aggregation';
};

export type GetV3CompaniesCompanyIdAssetsClimateScoresAggregationResponses = {
    /**
     * OK
     */
    200: {
        results?: Array<{
            asset_count?: number;
        } & Aggregates & ClimateRiskScore>;
    };
};

export type GetV3CompaniesCompanyIdAssetsClimateScoresAggregationResponse = GetV3CompaniesCompanyIdAssetsClimateScoresAggregationResponses[keyof GetV3CompaniesCompanyIdAssetsClimateScoresAggregationResponses];

export type GetV3CompaniesCompanyIdAssetsClimateScoresGroupsData = {
    body?: never;
    path: {
        /**
         * Company unique UUID
         */
        company_id: string;
    };
    query?: {
        /**
         * The forward-looking climate pathway used as the basis for the analytics
         */
        pathway?: string;
        /**
         * The future period of time (also called a climatology) used as the basis for the analytics
         */
        horizon?: number;
        /**
         * The type of risk used as the basis for the analysis
         */
        risk?: 'physical' | 'transition';
        /**
         * The multifactor statistic used as the basis for the analysis. Available values are dcr_score, expected_impact, cvar_50, cvar_95, cvar_99, var_50, var_95, var_99
         */
        metric?: string;
        /**
         * Group by the requested number of bins
         */
        bins?: number;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
    };
    url: '/v3/companies/{company_id}/assets/climate/scores/histogram';
};

export type GetV3CompaniesCompanyIdAssetsClimateScoresGroupsResponses = {
    /**
     * OK
     */
    200: {
        results?: Array<{
            asset_count?: number;
            bin_index?: number;
        }>;
    };
};

export type GetV3CompaniesCompanyIdAssetsClimateScoresGroupsResponse = GetV3CompaniesCompanyIdAssetsClimateScoresGroupsResponses[keyof GetV3CompaniesCompanyIdAssetsClimateScoresGroupsResponses];

export type GetV3CompaniesCompanyIdAssetsClimateImpactsData = {
    body?: never;
    path: {
        /**
         * Universally unique identifier (UUID) that distinctly identifies each company
         */
        company_id: string;
    };
    query?: {
        /**
         * The type of risk used as the basis for the analysis
         */
        risk?: 'physical' | 'transition';
        /**
         * The forward-looking climate pathway used as the basis for the analytics
         */
        pathway?: string;
        /**
         * The future period of time (also called a climatology) used as the basis for the analytics
         */
        horizon?: number;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * Pagination cursor to request the next page
         */
        cursor?: string;
        /**
         * The number of results to return per page
         */
        limit?: number;
        /**
         * The multifactor statistic used as the basis for the analysis. Available values are dcr_score, expected_impact, cvar_50, cvar_95, cvar_99, var_50, var_95, var_99
         */
        metric?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
        /**
         * Sort by
         */
        sort_by?: 'id' | 'asset_type' | 'country' | 'state';
        /**
         * Sort direction
         */
        sort_direction?: 'ascending' | 'descending';
    };
    url: '/v3/companies/{company_id}/assets/climate/impacts';
};

export type GetV3CompaniesCompanyIdAssetsClimateImpactsResponses = {
    /**
     * OK
     */
    200: ImpactPagination;
};

export type GetV3CompaniesCompanyIdAssetsClimateImpactsResponse = GetV3CompaniesCompanyIdAssetsClimateImpactsResponses[keyof GetV3CompaniesCompanyIdAssetsClimateImpactsResponses];

export type GetV3CompaniesCompanyIdAssetsClimateImpactsAggregationData = {
    body?: never;
    path: {
        /**
         * Company unique UUID
         */
        company_id: string;
    };
    query?: {
        /**
         * The forward-looking climate pathway used as the basis for the analytics
         */
        pathway?: string;
        /**
         * The future period of time (also called a climatology) used as the basis for the analytics
         */
        horizon?: number;
        /**
         * The type of risk used as the basis for the analysis
         */
        risk?: 'physical' | 'transition';
        /**
         * Property to aggregate by
         */
        by?: 'country' | 'state' | 'asset_type';
        /**
         * The multifactor statistic used as the basis for the analysis. Available values are dcr_score, expected_impact, cvar_50, cvar_95, cvar_99, var_50, var_95, var_99
         */
        metric?: string;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
    };
    url: '/v3/companies/{company_id}/assets/climate/impacts/aggregation';
};

export type GetV3CompaniesCompanyIdAssetsClimateImpactsAggregationResponses = {
    /**
     * OK
     */
    200: {
        results?: Array<{
            asset_count?: number;
        } & Aggregates & IndexImpact>;
    };
};

export type GetV3CompaniesCompanyIdAssetsClimateImpactsAggregationResponse = GetV3CompaniesCompanyIdAssetsClimateImpactsAggregationResponses[keyof GetV3CompaniesCompanyIdAssetsClimateImpactsAggregationResponses];

export type GetV3CompaniesCompanyIdAssetsAggregationData = {
    body?: never;
    path: {
        /**
         * Universally unique identifier (UUID) that distinctly identifies each company
         */
        company_id: string;
    };
    query?: {
        /**
         * Property to aggregate by
         */
        by?: 'country' | 'state' | 'asset_type';
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
    };
    url: '/v3/companies/{company_id}/assets/aggregation';
};

export type GetV3CompaniesCompanyIdAssetsAggregationResponses = {
    /**
     * OK
     */
    200: {
        results?: Array<{
            asset_count?: number;
        } & Aggregates>;
    };
};

export type GetV3CompaniesCompanyIdAssetsAggregationResponse = GetV3CompaniesCompanyIdAssetsAggregationResponses[keyof GetV3CompaniesCompanyIdAssetsAggregationResponses];

export type GetV3CompaniesCompanyIdSubsidiariesData = {
    body?: never;
    path: {
        /**
         * Universally unique identifier (UUID) that distinctly identifies each company
         */
        company_id: string;
    };
    query?: never;
    url: '/v3/companies/{company_id}/subsidiaries';
};

export type GetV3CompaniesCompanyIdSubsidiariesResponses = {
    /**
     * OK
     */
    200: {
        results?: Array<Company>;
    };
};

export type GetV3CompaniesCompanyIdSubsidiariesResponse = GetV3CompaniesCompanyIdSubsidiariesResponses[keyof GetV3CompaniesCompanyIdSubsidiariesResponses];

export type PostV3CompaniesCompanyIdSubsidiariesData = {
    /**
     * ID of the company that will be a subsidiary
     */
    body?: {
        company_id?: string;
    };
    path: {
        /**
         * Universally unique identifier (UUID) that distinctly identifies each company
         */
        company_id: string;
    };
    query?: never;
    url: '/v3/companies/{company_id}/subsidiaries';
};

export type PostV3CompaniesCompanyIdSubsidiariesResponses = {
    /**
     * Standard success response
     */
    200: {
        code?: number;
        status?: string;
        timestamp?: string;
    };
};

export type PostV3CompaniesCompanyIdSubsidiariesResponse = PostV3CompaniesCompanyIdSubsidiariesResponses[keyof PostV3CompaniesCompanyIdSubsidiariesResponses];

export type GetV3AssetsAssetIdClimateScoresData = {
    body?: never;
    path: {
        /**
         * Universally unique identifier (UUID) that distinctly identifies each asset
         */
        asset_id: string;
    };
    query?: {
        /**
         * The forward-looking climate pathway used as the basis for the analytics
         */
        pathway?: string;
        /**
         * The future period of time (also called a climatology) used as the basis for the analytics
         */
        horizon?: number;
        /**
         * The multifactor statistic used as the basis for the analysis. Available values are dcr_score, expected_impact, cvar_50, cvar_95, cvar_99, var_50, var_95, var_99
         */
        metric?: string;
        /**
         * The type of risk used as the basis for the analysis
         */
        risk?: 'physical' | 'transition';
    };
    url: '/v3/assets/{asset_id}/climate/scores';
};

export type GetV3AssetsAssetIdClimateScoresResponses = {
    /**
     * OK
     */
    200: {
        results?: Array<{
            hex_id?: number;
            horizon?: number;
            pathway?: string;
            country?: string;
            dcr_score?: number;
            expected_impact?: number;
            cvar_50?: number;
            cvar_95?: number;
            cvar_99?: number;
            var_50?: number;
            var_95?: number;
            var_99?: number;
            index_risks?: Array<{
                index?: string;
                index_impact_cvar_50?: number;
                index_impact_cvar_95?: number;
                index_impact_cvar_99?: number;
                index_attribution_cvar_50?: number;
                index_attribution_cvar_95?: number;
                index_attribution_cvar_99?: number;
                index_impact_var_50?: number;
                index_impact_var_95?: number;
                index_impact_var_99?: number;
                index_attribution_var_50?: number;
                index_attribution_var_95?: number;
                index_attribution_var_99?: number;
                index_impact_expected?: number;
                index_attribution_expected?: number;
            }>;
        }>;
    };
};

export type GetV3AssetsAssetIdClimateScoresResponse = GetV3AssetsAssetIdClimateScoresResponses[keyof GetV3AssetsAssetIdClimateScoresResponses];

export type GetV3CompaniesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Pagination cursor to request the next page
         */
        cursor?: string;
        /**
         * The number of results to return per page
         */
        limit?: number;
        /**
         * Defines the visibility and search boundary for the request. Use this parameter to control the breadth of the search context based on data accessibility and intended query scope.
         */
        scope?: 'public' | 'organization' | 'company';
        /**
         * Sort by
         */
        sort_by?: 'created_at' | 'name' | 'sector';
        /**
         * Sort direction
         */
        sort_direction?: 'ascending' | 'descending';
    };
    url: '/v3/companies';
};

export type GetV3CompaniesResponses = {
    /**
     * OK
     */
    200: CompanyPagination;
};

export type GetV3CompaniesResponse = GetV3CompaniesResponses[keyof GetV3CompaniesResponses];

export type PostV3CompaniesData = {
    body?: {
        name?: string;
        sector?: string;
        annual_revenue?: number | null;
        market_cap?: number | null;
        headquarters_country?: string | null;
        'isin_codes:'?: Array<string> | null;
        lei_code?: string | null;
        figi_codes?: Array<string> | null;
        cik_code?: string | null;
        stock_tickers?: Array<string> | null;
    };
    path?: never;
    query?: never;
    url: '/v3/companies';
};

export type PostV3CompaniesResponses = {
    /**
     * OK
     */
    200: Company;
};

export type PostV3CompaniesResponse = PostV3CompaniesResponses[keyof PostV3CompaniesResponses];

export type GetV3CompanySearchData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The number of results to return per page
         */
        limit?: number;
        /**
         * Company name to search for
         */
        name?: string;
        /**
         * ISIN code to search for
         */
        isin_code?: string;
        /**
         * GICS sector to search for
         */
        sector?: string;
        /**
         * Stock ticker to search for
         */
        stock_ticker?: string;
        /**
         * Search method
         */
        method?: 'fuzzy' | 'strict';
    };
    url: '/v3/companies/search';
};

export type GetV3CompanySearchResponses = {
    /**
     * Ok
     */
    200: {
        results?: Array<Company>;
    };
};

export type GetV3CompanySearchResponse = GetV3CompanySearchResponses[keyof GetV3CompanySearchResponses];

export type GetV3MarketsGroupsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Pagination cursor to request the next page
         */
        cursor?: string;
        /**
         * The number of results to return per page
         */
        limit?: number;
    };
    url: '/v3/markets/groups';
};

export type GetV3MarketsGroupsResponses = {
    /**
     * OK
     */
    200: MarketIndexGroupPagination;
};

export type GetV3MarketsGroupsResponse = GetV3MarketsGroupsResponses[keyof GetV3MarketsGroupsResponses];

export type DeleteV3MarketsGroupsGroupIdData = {
    body?: never;
    path: {
        /**
         * Market index group unique UUID
         */
        group_id: string;
    };
    query?: never;
    url: '/v3/markets/groups/{group_id}';
};

export type DeleteV3MarketsGroupsGroupIdResponses = {
    /**
     * Standard success response
     */
    200: {
        code?: number;
        status?: string;
        timestamp?: string;
    };
};

export type DeleteV3MarketsGroupsGroupIdResponse = DeleteV3MarketsGroupsGroupIdResponses[keyof DeleteV3MarketsGroupsGroupIdResponses];

export type GetV3MarketsGroupsGroupIdData = {
    body?: never;
    path: {
        /**
         * Market index group unique UUID
         */
        group_id: string;
    };
    query?: never;
    url: '/v3/markets/groups/{group_id}';
};

export type GetV3MarketsGroupsGroupIdResponses = {
    /**
     * OK
     */
    200: MarketIndexGroup;
};

export type GetV3MarketsGroupsGroupIdResponse = GetV3MarketsGroupsGroupIdResponses[keyof GetV3MarketsGroupsGroupIdResponses];

export type PatchV3MarketsGroupsGroupIdData = {
    body?: {
        name?: string | null;
    };
    path: {
        /**
         * Market index group unique UUID
         */
        group_id: string;
    };
    query?: never;
    url: '/v3/markets/groups/{group_id}';
};

export type PatchV3MarketsGroupsGroupIdResponses = {
    /**
     * OK
     */
    200: MarketIndexGroup;
};

export type PatchV3MarketsGroupsGroupIdResponse = PatchV3MarketsGroupsGroupIdResponses[keyof PatchV3MarketsGroupsGroupIdResponses];

export type GetV3MarketsGroupsGroupIdConstituentsData = {
    body?: never;
    path: {
        /**
         * Market index group unique UUID
         */
        group_id: string;
    };
    query?: {
        /**
         * Pagination cursor to request the next page
         */
        cursor?: string;
        /**
         * The number of results to return per page
         */
        limit?: number;
    };
    url: '/v3/markets/groups/{group_id}/constituents';
};

export type GetV3MarketsGroupsGroupIdConstituentsResponses = {
    /**
     * OK
     */
    200: MarketIndexPagination;
};

export type GetV3MarketsGroupsGroupIdConstituentsResponse = GetV3MarketsGroupsGroupIdConstituentsResponses[keyof GetV3MarketsGroupsGroupIdConstituentsResponses];

export type PostV3MarketsGroupsGroupIdConstituentsData = {
    body?: {
        index_id?: string;
    };
    path: {
        /**
         * Market index group unique UUID
         */
        group_id: string;
    };
    query?: never;
    url: '/v3/markets/groups/{group_id}/constituents';
};

export type PostV3MarketsGroupsGroupIdConstituentsResponses = {
    /**
     * Standard success response
     */
    200: {
        code?: number;
        status?: string;
        timestamp?: string;
    };
};

export type PostV3MarketsGroupsGroupIdConstituentsResponse = PostV3MarketsGroupsGroupIdConstituentsResponses[keyof PostV3MarketsGroupsGroupIdConstituentsResponses];

export type GetV3MarketsIndexesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Pagination cursor to request the next page
         */
        cursor?: string;
        /**
         * The number of results to return per page
         */
        limit?: number;
    };
    url: '/v3/markets/indexes';
};

export type GetV3MarketsIndexesResponses = {
    /**
     * OK
     */
    200: MarketIndexPagination;
};

export type GetV3MarketsIndexesResponse = GetV3MarketsIndexesResponses[keyof GetV3MarketsIndexesResponses];

export type DeleteV3MarketsIndexesIndexIdData = {
    body?: never;
    path: {
        /**
         * Market index unique UUID
         */
        index_id: string;
    };
    query?: never;
    url: '/v3/markets/indexes/{index_id}';
};

export type DeleteV3MarketsIndexesIndexIdResponses = {
    /**
     * Standard success response
     */
    200: {
        code?: number;
        status?: string;
        timestamp?: string;
    };
};

export type DeleteV3MarketsIndexesIndexIdResponse = DeleteV3MarketsIndexesIndexIdResponses[keyof DeleteV3MarketsIndexesIndexIdResponses];

export type GetV3MarketsIndexesIndexIdData = {
    body?: never;
    path: {
        /**
         * Market index unique UUID
         */
        index_id: string;
    };
    query?: never;
    url: '/v3/markets/indexes/{index_id}';
};

export type GetV3MarketsIndexesIndexIdResponses = {
    /**
     * OK
     */
    200: MarketIndex;
};

export type GetV3MarketsIndexesIndexIdResponse = GetV3MarketsIndexesIndexIdResponses[keyof GetV3MarketsIndexesIndexIdResponses];

export type PatchV3MarketsIndexesIndexIdData = {
    body?: {
        name?: string | null;
        sectors?: Array<string> | null;
    };
    path: {
        /**
         * Market index unique UUID
         */
        index_id: string;
    };
    query?: never;
    url: '/v3/markets/indexes/{index_id}';
};

export type PatchV3MarketsIndexesIndexIdResponses = {
    /**
     * OK
     */
    200: MarketIndex;
};

export type PatchV3MarketsIndexesIndexIdResponse = PatchV3MarketsIndexesIndexIdResponses[keyof PatchV3MarketsIndexesIndexIdResponses];

export type GetV3MarketsIndexesIndexIdCompaniesData = {
    body?: never;
    path: {
        /**
         * Market index unique UUID
         */
        index_id: string;
    };
    query?: {
        /**
         * Pagination cursor to request the next page
         */
        cursor?: string;
        /**
         * The number of results to return per page
         */
        limit?: number;
        /**
         * GICS sector to filter by. Optionally supports comma-separated list
         */
        sector?: string;
        /**
         * Sort by
         */
        sort_by?: 'company_name' | 'sector';
        /**
         * Sort direction
         */
        sort_direction?: 'ascending' | 'descending';
    };
    url: '/v3/markets/indexes/{index_id}/companies';
};

export type GetV3MarketsIndexesIndexIdCompaniesResponses = {
    /**
     * OK
     */
    200: CompanyPagination;
};

export type GetV3MarketsIndexesIndexIdCompaniesResponse = GetV3MarketsIndexesIndexIdCompaniesResponses[keyof GetV3MarketsIndexesIndexIdCompaniesResponses];

export type GetV3MarketsIndexesIndexIdAssetsClimateScoresData = {
    body?: never;
    path: {
        /**
         * Market index unique UUID
         */
        index_id: string;
    };
    query?: {
        /**
         * The type of risk used as the basis for the analysis
         */
        risk?: 'physical' | 'transition';
        /**
         * The forward-looking climate pathway used as the basis for the analytics
         */
        pathway?: string;
        /**
         * The future period of time (also called a climatology) used as the basis for the analytics
         */
        horizon?: number;
        /**
         * Pagination cursor to request the next page
         */
        cursor?: string;
        /**
         * The number of results to return per page
         */
        limit?: number;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
        /**
         * The multifactor statistic used as the basis for the analysis. Available values are dcr_score, expected_impact, cvar_50, cvar_95, cvar_99, var_50, var_95, var_99
         */
        metric?: string;
        /**
         * GICS sector to filter by. Optionally supports comma-separated list
         */
        sector?: string;
        /**
         * The minimum requested risk range of the metric
         */
        min_risk?: number;
        /**
         * The maximum requested risk range of the metric
         */
        max_risk?: number;
        /**
         * Sort by
         */
        sort_by?: 'id' | 'asset_type' | 'country' | 'state' | 'downside_likelihood' | 'expected_impact' | 'cvar_99' | 'cvar_95' | 'cvar_50' | 'var_50' | 'var_95' | 'var_99';
        /**
         * Sort direction
         */
        sort_direction?: 'ascending' | 'descending';
    };
    url: '/v3/markets/indexes/{index_id}/assets/climate/scores';
};

export type GetV3MarketsIndexesIndexIdAssetsClimateScoresResponses = {
    /**
     * OK
     */
    200: ScorePagination;
};

export type GetV3MarketsIndexesIndexIdAssetsClimateScoresResponse = GetV3MarketsIndexesIndexIdAssetsClimateScoresResponses[keyof GetV3MarketsIndexesIndexIdAssetsClimateScoresResponses];

export type GetV3MarketsIndexesIndexIdAssetsClimateImpactsData = {
    body?: never;
    path: {
        /**
         * Market index unique UUID
         */
        index_id: string;
    };
    query?: {
        /**
         * The type of risk used as the basis for the analysis
         */
        risk?: 'physical' | 'transition';
        /**
         * The forward-looking climate pathway used as the basis for the analytics
         */
        pathway?: string;
        /**
         * The future period of time (also called a climatology) used as the basis for the analytics
         */
        horizon?: number;
        /**
         * Pagination cursor to request the next page
         */
        cursor?: string;
        /**
         * The number of results to return per page
         */
        limit?: number;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
        /**
         * The multifactor statistic used as the basis for the analysis. Available values are dcr_score, expected_impact, cvar_50, cvar_95, cvar_99, var_50, var_95, var_99
         */
        metric?: string;
        /**
         * GICS sector to filter by. Optionally supports comma-separated list
         */
        sector?: string;
        /**
         * Sort by
         */
        sort_by?: 'id' | 'asset_type' | 'country' | 'state';
        /**
         * Sort direction
         */
        sort_direction?: 'ascending' | 'descending';
    };
    url: '/v3/markets/indexes/{index_id}/assets/climate/impacts';
};

export type GetV3MarketsIndexesIndexIdAssetsClimateImpactsResponses = {
    /**
     * OK
     */
    200: ImpactPagination;
};

export type GetV3MarketsIndexesIndexIdAssetsClimateImpactsResponse = GetV3MarketsIndexesIndexIdAssetsClimateImpactsResponses[keyof GetV3MarketsIndexesIndexIdAssetsClimateImpactsResponses];

export type GetV3MarketsIndexesIndexIdAssetsClimateScoresAggregationData = {
    body?: never;
    path: {
        /**
         * Market index unique UUID
         */
        index_id: string;
    };
    query?: {
        /**
         * The type of risk used as the basis for the analysis
         */
        risk?: 'physical' | 'transition';
        /**
         * The forward-looking climate pathway used as the basis for the analytics
         */
        pathway?: string;
        /**
         * The future period of time (also called a climatology) used as the basis for the analytics
         */
        horizon?: number;
        /**
         * Property to aggregate by
         */
        by?: 'country' | 'state' | 'asset_type';
        /**
         * The multifactor statistic used as the basis for the analysis. Available values are dcr_score, expected_impact, cvar_50, cvar_95, cvar_99, var_50, var_95, var_99
         */
        metric?: string;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
        /**
         * GICS sector to filter by. Optionally supports comma-separated list
         */
        sector?: string;
    };
    url: '/v3/markets/indexes/{index_id}/assets/climate/scores/aggregation';
};

export type GetV3MarketsIndexesIndexIdAssetsClimateScoresAggregationResponses = {
    /**
     * OK
     */
    200: {
        results?: Array<{
            asset_count?: number;
        } & AggregatesPortfolio & ClimateRiskScore>;
    };
};

export type GetV3MarketsIndexesIndexIdAssetsClimateScoresAggregationResponse = GetV3MarketsIndexesIndexIdAssetsClimateScoresAggregationResponses[keyof GetV3MarketsIndexesIndexIdAssetsClimateScoresAggregationResponses];

export type GetV3MarketsIndexesIndexIdAssetsClimateImpactsAggregationData = {
    body?: never;
    path: {
        /**
         * Market index unique UUID
         */
        index_id: string;
    };
    query?: {
        /**
         * The type of risk used as the basis for the analysis
         */
        risk?: 'physical' | 'transition';
        /**
         * The forward-looking climate pathway used as the basis for the analytics
         */
        pathway?: string;
        /**
         * The future period of time (also called a climatology) used as the basis for the analytics
         */
        horizon?: number;
        /**
         * Property to aggregate by
         */
        by?: 'country' | 'state' | 'asset_type';
        /**
         * The multifactor statistic used as the basis for the analysis. Available values are dcr_score, expected_impact, cvar_50, cvar_95, cvar_99, var_50, var_95, var_99
         */
        metric?: string;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
        /**
         * GICS sector to filter by. Optionally supports comma-separated list
         */
        sector?: string;
    };
    url: '/v3/markets/indexes/{index_id}/assets/climate/impacts/aggregation';
};

export type GetV3MarketsIndexesIndexIdAssetsClimateImpactsAggregationResponses = {
    /**
     * OK
     */
    200: {
        results?: Array<{
            asset_count?: number;
        } & Aggregates & IndexImpact>;
    };
};

export type GetV3MarketsIndexesIndexIdAssetsClimateImpactsAggregationResponse = GetV3MarketsIndexesIndexIdAssetsClimateImpactsAggregationResponses[keyof GetV3MarketsIndexesIndexIdAssetsClimateImpactsAggregationResponses];

export type GetV3MarketsIndexesIndexIdAssetsClimateScoresHistogramData = {
    body?: never;
    path: {
        /**
         * Market index unique UUID
         */
        index_id: string;
    };
    query?: {
        /**
         * The type of risk used as the basis for the analysis
         */
        risk?: 'physical' | 'transition';
        /**
         * The forward-looking climate pathway used as the basis for the analytics
         */
        pathway?: string;
        /**
         * The future period of time (also called a climatology) used as the basis for the analytics
         */
        horizon?: number;
        /**
         * Group by the requested number of bins
         */
        bins?: number;
        /**
         * The multifactor statistic used as the basis for the analysis. Available values are dcr_score, expected_impact, cvar_50, cvar_95, cvar_99, var_50, var_95, var_99
         */
        metric?: string;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
        /**
         * GICS sector to filter by. Optionally supports comma-separated list
         */
        sector?: string;
    };
    url: '/v3/markets/indexes/{index_id}/assets/climate/scores/histogram';
};

export type GetV3MarketsIndexesIndexIdAssetsClimateScoresHistogramResponses = {
    /**
     * OK
     */
    200: {
        results?: Array<{
            asset_count?: number;
            bin_index?: number;
        }>;
    };
};

export type GetV3MarketsIndexesIndexIdAssetsClimateScoresHistogramResponse = GetV3MarketsIndexesIndexIdAssetsClimateScoresHistogramResponses[keyof GetV3MarketsIndexesIndexIdAssetsClimateScoresHistogramResponses];

export type GetV3MarketsIndexesIndexIdClimateScoresData = {
    body?: never;
    path: {
        /**
         * Market index unique UUID
         */
        index_id: string;
    };
    query?: {
        /**
         * The type of risk used as the basis for the analysis
         */
        risk?: 'physical' | 'transition';
        /**
         * The forward-looking climate pathway used as the basis for the analytics
         */
        pathway?: string;
        /**
         * The future period of time (also called a climatology) used as the basis for the analytics
         */
        horizon?: number;
        /**
         * The multifactor statistic used as the basis for the analysis. Available values are dcr_score, expected_impact, cvar_50, cvar_95, cvar_99, var_50, var_95, var_99
         */
        metric?: string;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
        /**
         * GICS sector to filter by. Optionally supports comma-separated list
         */
        sector?: string;
    };
    url: '/v3/markets/indexes/{index_id}/climate/scores';
};

export type GetV3MarketsIndexesIndexIdClimateScoresResponses = {
    /**
     * OK
     */
    200: ClimateRiskScore;
};

export type GetV3MarketsIndexesIndexIdClimateScoresResponse = GetV3MarketsIndexesIndexIdClimateScoresResponses[keyof GetV3MarketsIndexesIndexIdClimateScoresResponses];

export type GetV3MarketsIndexesIndexIdClimateImpactsData = {
    body?: never;
    path: {
        /**
         * Market index unique UUID
         */
        index_id: string;
    };
    query?: {
        /**
         * The type of risk used as the basis for the analysis
         */
        risk?: 'physical' | 'transition';
        /**
         * The forward-looking climate pathway used as the basis for the analytics
         */
        pathway?: string;
        /**
         * The future period of time (also called a climatology) used as the basis for the analytics
         */
        horizon?: number;
        /**
         * The multifactor statistic used as the basis for the analysis. Available values are dcr_score, expected_impact, cvar_50, cvar_95, cvar_99, var_50, var_95, var_99
         */
        metric?: string;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
        /**
         * GICS sector to filter by. Optionally supports comma-separated list
         */
        sector?: string;
    };
    url: '/v3/markets/indexes/{index_id}/climate/impacts';
};

export type GetV3MarketsIndexesIndexIdClimateImpactsResponses = {
    /**
     * OK
     */
    200: {
        results?: Array<IndexImpact>;
    };
};

export type GetV3MarketsIndexesIndexIdClimateImpactsResponse = GetV3MarketsIndexesIndexIdClimateImpactsResponses[keyof GetV3MarketsIndexesIndexIdClimateImpactsResponses];

export type GetV3MarketsIndexesIndexIdCompaniesClimateScoresData = {
    body?: never;
    path: {
        /**
         * Market index unique UUID
         */
        index_id: string;
    };
    query?: {
        /**
         * The type of risk used as the basis for the analysis
         */
        risk?: 'physical' | 'transition';
        /**
         * The forward-looking climate pathway used as the basis for the analytics
         */
        pathway?: string;
        /**
         * The future period of time (also called a climatology) used as the basis for the analytics
         */
        horizon?: number;
        /**
         * Pagination cursor to request the next page
         */
        cursor?: string;
        /**
         * The number of results to return per page
         */
        limit?: number;
        /**
         * The multifactor statistic used as the basis for the analysis. Available values are dcr_score, expected_impact, cvar_50, cvar_95, cvar_99, var_50, var_95, var_99
         */
        metric?: string;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
        /**
         * GICS sector to filter by. Optionally supports comma-separated list
         */
        sector?: string;
        /**
         * The minimum requested risk range of the metric
         */
        min_risk?: number;
        /**
         * The maximum requested risk range of the metric
         */
        max_risk?: number;
        /**
         * Sort by
         */
        sort_by?: 'id' | 'asset_count' | 'sector' | 'company_name' | 'downside_likelihood' | 'expected_impact' | 'cvar_99' | 'cvar_95' | 'cvar_50' | 'var_50' | 'var_95' | 'var_99';
        /**
         * Sort direction
         */
        sort_direction?: 'ascending' | 'descending';
    };
    url: '/v3/markets/indexes/{index_id}/companies/climate/scores';
};

export type GetV3MarketsIndexesIndexIdCompaniesClimateScoresResponses = {
    /**
     * OK
     */
    200: ScoreCompanyPagination;
};

export type GetV3MarketsIndexesIndexIdCompaniesClimateScoresResponse = GetV3MarketsIndexesIndexIdCompaniesClimateScoresResponses[keyof GetV3MarketsIndexesIndexIdCompaniesClimateScoresResponses];

export type GetV3MarketsIndexesIndexIdCompaniesClimateImpactsData = {
    body?: never;
    path: {
        /**
         * Market index unique UUID
         */
        index_id: string;
    };
    query?: {
        /**
         * The type of risk used as the basis for the analysis
         */
        risk?: 'physical' | 'transition';
        /**
         * The forward-looking climate pathway used as the basis for the analytics
         */
        pathway?: string;
        /**
         * The future period of time (also called a climatology) used as the basis for the analytics
         */
        horizon?: number;
        /**
         * Pagination cursor to request the next page
         */
        cursor?: string;
        /**
         * The number of results to return per page
         */
        limit?: number;
        /**
         * The multifactor statistic used as the basis for the analysis. Available values are dcr_score, expected_impact, cvar_50, cvar_95, cvar_99, var_50, var_95, var_99
         */
        metric?: string;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
        /**
         * GICS sector to filter by. Optionally supports comma-separated list
         */
        sector?: string;
        /**
         * Sort by
         */
        sort_by?: 'id' | 'asset_count' | 'sector' | 'company_name';
        /**
         * Sort direction
         */
        sort_direction?: 'ascending' | 'descending';
    };
    url: '/v3/markets/indexes/{index_id}/companies/climate/impacts';
};

export type GetV3MarketsIndexesIndexIdCompaniesClimateImpactsResponses = {
    /**
     * OK
     */
    200: ImpactCompanyPagination;
};

export type GetV3MarketsIndexesIndexIdCompaniesClimateImpactsResponse = GetV3MarketsIndexesIndexIdCompaniesClimateImpactsResponses[keyof GetV3MarketsIndexesIndexIdCompaniesClimateImpactsResponses];

export type GetV3MarketsIndexesIndexIdAssetsData = {
    body?: never;
    path: {
        /**
         * Market index unique UUID
         */
        index_id: string;
    };
    query?: {
        /**
         * Pagination cursor to request the next page
         */
        cursor?: string;
        /**
         * The number of results to return per page
         */
        limit?: number;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
        /**
         * GICS sector to filter by. Optionally supports comma-separated list
         */
        sector?: string;
        /**
         * Sort by
         */
        sort_by?: 'asset_type' | 'country' | 'state';
        /**
         * Sort direction
         */
        sort_direction?: 'ascending' | 'descending';
    };
    url: '/v3/markets/indexes/{index_id}/assets';
};

export type GetV3MarketsIndexesIndexIdAssetsResponses = {
    /**
     * OK
     */
    200: AssetPagination;
};

export type GetV3MarketsIndexesIndexIdAssetsResponse = GetV3MarketsIndexesIndexIdAssetsResponses[keyof GetV3MarketsIndexesIndexIdAssetsResponses];

export type GetV3MarketsIndexesIndexIdAssetsAggregationData = {
    body?: never;
    path: {
        /**
         * Market index unique UUID
         */
        index_id: string;
    };
    query?: {
        /**
         * Property to aggregate by.
         */
        by?: 'sector' | 'asset_type' | 'country';
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
        /**
         * GICS sector to filter by. Optionally supports comma-separated list
         */
        sector?: string;
    };
    url: '/v3/markets/indexes/{index_id}/assets/aggregation';
};

export type GetV3MarketsIndexesIndexIdAssetsAggregationResponses = {
    /**
     * OK
     */
    200: {
        results?: Array<{
            asset_count?: number;
        } & AggregatesPortfolio>;
    };
};

export type GetV3MarketsIndexesIndexIdAssetsAggregationResponse = GetV3MarketsIndexesIndexIdAssetsAggregationResponses[keyof GetV3MarketsIndexesIndexIdAssetsAggregationResponses];

export type DeleteV3CompaniesCompanyIdSubsidiariesSubsidiaryIdData = {
    body?: never;
    path: {
        /**
         * Universally unique identifier (UUID) that distinctly identifies each company
         */
        company_id: string;
        /**
         * Unique company UUID of the subsidiary
         */
        subsidiary_id: string;
    };
    query?: never;
    url: '/v3/companies/{company_id}/subsidiaries/{subsidiary_id}';
};

export type DeleteV3CompaniesCompanyIdSubsidiariesSubsidiaryIdResponses = {
    /**
     * Standard success response
     */
    200: {
        code?: number;
        status?: string;
        timestamp?: string;
    };
};

export type DeleteV3CompaniesCompanyIdSubsidiariesSubsidiaryIdResponse = DeleteV3CompaniesCompanyIdSubsidiariesSubsidiaryIdResponses[keyof DeleteV3CompaniesCompanyIdSubsidiariesSubsidiaryIdResponses];

export type DeleteV3MarketsGroupsGroupIdConstituentsIndexIdData = {
    body?: never;
    path: {
        /**
         * Market index group unique UUID
         */
        group_id: string;
        /**
         * Market index unique UUID
         */
        index_id: string;
    };
    query?: never;
    url: '/v3/markets/groups/{group_id}/constituents/{index_id}';
};

export type DeleteV3MarketsGroupsGroupIdConstituentsIndexIdResponses = {
    /**
     * Standard success response
     */
    200: {
        code?: number;
        status?: string;
        timestamp?: string;
    };
};

export type DeleteV3MarketsGroupsGroupIdConstituentsIndexIdResponse = DeleteV3MarketsGroupsGroupIdConstituentsIndexIdResponses[keyof DeleteV3MarketsGroupsGroupIdConstituentsIndexIdResponses];

export type GetV3MarketsGroupsSearchData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The number of results to return per page
         */
        limit?: number;
        /**
         * Group name to search for
         */
        name?: string;
    };
    url: '/v3/markets/groups/search';
};

export type GetV3MarketsGroupsSearchResponses = {
    /**
     * OK
     */
    200: {
        results?: Array<MarketIndexGroup>;
    };
};

export type GetV3MarketsGroupsSearchResponse = GetV3MarketsGroupsSearchResponses[keyof GetV3MarketsGroupsSearchResponses];

export type GetV3MarketsIndexesSearchData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The number of results to return per page
         */
        limit?: number;
        /**
         * Index name to search for
         */
        name?: string;
    };
    url: '/v3/markets/indexes/search';
};

export type GetV3MarketsIndexesSearchResponses = {
    /**
     * OK
     */
    200: {
        results?: Array<MarketIndex>;
    };
};

export type GetV3MarketsIndexesSearchResponse = GetV3MarketsIndexesSearchResponses[keyof GetV3MarketsIndexesSearchResponses];

export type GetV3CompaniesCompanyIdGeoClustersData = {
    body?: never;
    path: {
        company_id: string;
    };
    query: {
        /**
         * Map zoom level
         */
        zoom: number;
        /**
         * Specifies a bounding box to filter locations within a defined geographic area. Provide four comma-separated values in the format: "min_longitude,min_latitude,max_longitude,max_latitude".
         */
        bbox?: string;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
        /**
         * Cluster radius
         */
        radius?: string;
    };
    url: '/v3/companies/{company_id}/geo/clusters';
};

export type GetV3CompaniesCompanyIdGeoClustersResponses = {
    /**
     * OK
     */
    200: {
        results?: Array<{
            latitude?: number;
            longitude?: number;
            count?: number;
        }>;
    };
};

export type GetV3CompaniesCompanyIdGeoClustersResponse = GetV3CompaniesCompanyIdGeoClustersResponses[keyof GetV3CompaniesCompanyIdGeoClustersResponses];

export type GetV3MarketsIndexesIndexIdGeoClustersData = {
    body?: never;
    path: {
        index_id: string;
    };
    query: {
        /**
         * Map zoom level
         */
        zoom: number;
        /**
         * Specifies a bounding box to filter locations within a defined geographic area. Provide four comma-separated values in the format: "min_longitude,min_latitude,max_longitude,max_latitude".
         */
        bbox?: string;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
        /**
         * Cluster radius
         */
        radius?: string;
    };
    url: '/v3/markets/indexes/{index_id}/geo/clusters';
};

export type GetV3MarketsIndexesIndexIdGeoClustersResponses = {
    /**
     * OK
     */
    200: {
        results?: Array<{
            latitude?: number;
            longitude?: number;
            count?: number;
        }>;
    };
};

export type GetV3MarketsIndexesIndexIdGeoClustersResponse = GetV3MarketsIndexesIndexIdGeoClustersResponses[keyof GetV3MarketsIndexesIndexIdGeoClustersResponses];

export type V3GetMarketsIndexesIndexIdCompaniesClimateScoresHistogramData = {
    body?: never;
    path: {
        index_id: string;
    };
    query?: {
        /**
         * The forward-looking climate pathway used as the basis for the analytics
         */
        pathway?: string;
        /**
         * The future period of time (also called a climatology) used as the basis for the analytics
         */
        horizon?: number;
        /**
         * The multifactor statistic used as the basis for the analysis. Available values are dcr_score, expected_impact, cvar_50, cvar_95, cvar_99, var_50, var_95, var_99
         */
        metric?: string;
        /**
         * GICS sector to filter by. Optionally supports comma-separated list
         */
        sector?: string;
        /**
         * Property to aggregate by
         */
        by?: 'country' | 'state' | 'asset_type';
        /**
         * Group by the requested number of bins
         */
        bins?: number;
        /**
         * H3 hexagon ID supplied as a hex string
         */
        hex_id?: string;
        /**
         * ISO 3166-1 alpha-3 country code. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        country?: string;
        /**
         * The region or state within country. Supports a single ISO-3 code or a comma-separated list for multiple countries as a single string
         */
        state?: string;
        /**
         * RiskThinking.ai’s CDT physical asset type. Supports a single asset type or a comma-separated list for multiple asset types as a single string
         */
        asset_type?: string;
    };
    url: '/v3/markets/indexes/{index_id}/companies/climate/scores/histogram';
};

export type V3GetMarketsIndexesIndexIdCompaniesClimateScoresHistogramResponses = {
    /**
     * OK
     */
    200: {
        results?: Array<{
            company_count?: number;
            bin_index?: number;
        }>;
    };
};

export type V3GetMarketsIndexesIndexIdCompaniesClimateScoresHistogramResponse = V3GetMarketsIndexesIndexIdCompaniesClimateScoresHistogramResponses[keyof V3GetMarketsIndexesIndexIdCompaniesClimateScoresHistogramResponses];

export type GetV3MarketsIndexesIndexIdCompaniesAggregationData = {
    body?: never;
    path: {
        /**
         * Market index unique UUID
         */
        index_id: string;
    };
    query?: {
        /**
         * Property to aggregate
         */
        by?: 'sector';
    };
    url: '/v3/markets/indexes/{index_id}/companies/aggregation';
};

export type GetV3MarketsIndexesIndexIdCompaniesAggregationResponses = {
    /**
     * OK
     */
    200: {
        results?: Array<{
            entity_count?: number;
            sector?: string;
        }>;
    };
};

export type GetV3MarketsIndexesIndexIdCompaniesAggregationResponse = GetV3MarketsIndexesIndexIdCompaniesAggregationResponses[keyof GetV3MarketsIndexesIndexIdCompaniesAggregationResponses];

export type GetV3AssetsSearchData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Defines the visibility and search boundary for the request. Use this parameter to control the breadth of the search context based on data accessibility and intended query scope.
         */
        scope?: 'public' | 'organization' | 'company';
        /**
         * Specifies the unique identifier of the company to search within when scope is set to company. Required only when scope is set to company. Ignored for other values of scope (organization or public).
         */
        company_id?: string;
        /**
         * Search term used to filter assets by name or address. This parameter is used when querying user-uploaded assets.
         */
        query?: string;
    };
    url: '/v3/assets/search';
};

export type GetV3AssetsSearchResponses = {
    /**
     * OK
     */
    200: {
        results?: Array<Asset>;
    };
};

export type GetV3AssetsSearchResponse = GetV3AssetsSearchResponses[keyof GetV3AssetsSearchResponses];
