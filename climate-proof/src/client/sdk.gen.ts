// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { DeleteV3AssetsAssetIdData, DeleteV3AssetsAssetIdResponses, DeleteV3CompaniesCompanyIdData, DeleteV3CompaniesCompanyIdResponses, DeleteV3CompaniesCompanyIdSubsidiariesSubsidiaryIdData, DeleteV3CompaniesCompanyIdSubsidiariesSubsidiaryIdResponses, DeleteV3MarketsGroupsGroupIdConstituentsIndexIdData, DeleteV3MarketsGroupsGroupIdConstituentsIndexIdResponses, DeleteV3MarketsGroupsGroupIdData, DeleteV3MarketsGroupsGroupIdResponses, DeleteV3MarketsIndexesIndexIdData, DeleteV3MarketsIndexesIndexIdResponses, GetV3AssetsAssetIdClimateScoresData, GetV3AssetsAssetIdClimateScoresResponses, GetV3AssetsAssetIdData, GetV3AssetsAssetIdErrors, GetV3AssetsAssetIdOwnershipData, GetV3AssetsAssetIdOwnershipResponses, GetV3AssetsAssetIdResponses, GetV3AssetsData, GetV3AssetsErrors, GetV3AssetsResponses, GetV3AssetsSearchData, GetV3AssetsSearchResponses, GetV3CompaniesCompanyIdAssetsAggregationData, GetV3CompaniesCompanyIdAssetsAggregationResponses, GetV3CompaniesCompanyIdAssetsClimateImpactsAggregationData, GetV3CompaniesCompanyIdAssetsClimateImpactsAggregationResponses, GetV3CompaniesCompanyIdAssetsClimateImpactsData, GetV3CompaniesCompanyIdAssetsClimateImpactsResponses, GetV3CompaniesCompanyIdAssetsClimateScoresAggregationData, GetV3CompaniesCompanyIdAssetsClimateScoresAggregationResponses, GetV3CompaniesCompanyIdAssetsClimateScoresData, GetV3CompaniesCompanyIdAssetsClimateScoresGroupsData, GetV3CompaniesCompanyIdAssetsClimateScoresGroupsResponses, GetV3CompaniesCompanyIdAssetsClimateScoresResponses, GetV3CompaniesCompanyIdAssetsData, GetV3CompaniesCompanyIdAssetsLocationsData, GetV3CompaniesCompanyIdAssetsLocationsResponses, GetV3CompaniesCompanyIdAssetsResponses, GetV3CompaniesCompanyIdClimateImpactsData, GetV3CompaniesCompanyIdClimateImpactsResponses, GetV3CompaniesCompanyIdClimateScoresData, GetV3CompaniesCompanyIdClimateScoresResponses, GetV3CompaniesCompanyIdGeoClustersData, GetV3CompaniesCompanyIdGeoClustersResponses, GetV3CompaniesCompanyIdSubsidiariesData, GetV3CompaniesCompanyIdSubsidiariesResponses, GetV3CompaniesData, GetV3CompaniesIdData, GetV3CompaniesIdResponses, GetV3CompaniesResponses, GetV3CompanySearchData, GetV3CompanySearchResponses, GetV3MarketsGroupsData, GetV3MarketsGroupsGroupIdConstituentsData, GetV3MarketsGroupsGroupIdConstituentsResponses, GetV3MarketsGroupsGroupIdData, GetV3MarketsGroupsGroupIdResponses, GetV3MarketsGroupsResponses, GetV3MarketsGroupsSearchData, GetV3MarketsGroupsSearchResponses, GetV3MarketsIndexesData, GetV3MarketsIndexesIndexIdAssetsAggregationData, GetV3MarketsIndexesIndexIdAssetsAggregationResponses, GetV3MarketsIndexesIndexIdAssetsClimateImpactsAggregationData, GetV3MarketsIndexesIndexIdAssetsClimateImpactsAggregationResponses, GetV3MarketsIndexesIndexIdAssetsClimateImpactsData, GetV3MarketsIndexesIndexIdAssetsClimateImpactsResponses, GetV3MarketsIndexesIndexIdAssetsClimateScoresAggregationData, GetV3MarketsIndexesIndexIdAssetsClimateScoresAggregationResponses, GetV3MarketsIndexesIndexIdAssetsClimateScoresData, GetV3MarketsIndexesIndexIdAssetsClimateScoresHistogramData, GetV3MarketsIndexesIndexIdAssetsClimateScoresHistogramResponses, GetV3MarketsIndexesIndexIdAssetsClimateScoresResponses, GetV3MarketsIndexesIndexIdAssetsData, GetV3MarketsIndexesIndexIdAssetsResponses, GetV3MarketsIndexesIndexIdClimateImpactsData, GetV3MarketsIndexesIndexIdClimateImpactsResponses, GetV3MarketsIndexesIndexIdClimateScoresData, GetV3MarketsIndexesIndexIdClimateScoresResponses, GetV3MarketsIndexesIndexIdCompaniesAggregationData, GetV3MarketsIndexesIndexIdCompaniesAggregationResponses, GetV3MarketsIndexesIndexIdCompaniesClimateImpactsData, GetV3MarketsIndexesIndexIdCompaniesClimateImpactsResponses, GetV3MarketsIndexesIndexIdCompaniesClimateScoresData, GetV3MarketsIndexesIndexIdCompaniesClimateScoresResponses, GetV3MarketsIndexesIndexIdCompaniesData, GetV3MarketsIndexesIndexIdCompaniesResponses, GetV3MarketsIndexesIndexIdData, GetV3MarketsIndexesIndexIdGeoClustersData, GetV3MarketsIndexesIndexIdGeoClustersResponses, GetV3MarketsIndexesIndexIdResponses, GetV3MarketsIndexesResponses, GetV3MarketsIndexesSearchData, GetV3MarketsIndexesSearchResponses, PatchV3AssetsAssetIdData, PatchV3AssetsAssetIdResponses, PatchV3CompaniesCompanyIdData, PatchV3CompaniesCompanyIdResponses, PatchV3MarketsGroupsGroupIdData, PatchV3MarketsGroupsGroupIdResponses, PatchV3MarketsIndexesIndexIdData, PatchV3MarketsIndexesIndexIdResponses, PostV3CompaniesCompanyIdSubsidiariesData, PostV3CompaniesCompanyIdSubsidiariesResponses, PostV3CompaniesData, PostV3CompaniesResponses, PostV3MarketsGroupsGroupIdConstituentsData, PostV3MarketsGroupsGroupIdConstituentsResponses, V3GetMarketsIndexesIndexIdCompaniesClimateScoresHistogramData, V3GetMarketsIndexesIndexIdCompaniesClimateScoresHistogramResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Paginate assets
 * Use pagination parameters (`limit` and `cursor`) along with query filters (`country`, or `asset_type`) to retrieve physical asset data in batches.
 */
export const getV3Assets = <ThrowOnError extends boolean = false>(options?: Options<GetV3AssetsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetV3AssetsResponses, GetV3AssetsErrors, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/assets',
        ...options
    });
};

/**
 * Delete an asset
 * Use physical asset identifier (`asset_id`)  to delete physical asset information. The endpoint is active only for authorized `asset_id`.
 */
export const deleteV3AssetsAssetId = <ThrowOnError extends boolean = false>(options: Options<DeleteV3AssetsAssetIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteV3AssetsAssetIdResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/assets/{asset_id}',
        ...options
    });
};

/**
 * Get asset by id
 * Use physical asset identifier (`asset_id`)  to retrieve physical asset information.
 */
export const getV3AssetsAssetId = <ThrowOnError extends boolean = false>(options: Options<GetV3AssetsAssetIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3AssetsAssetIdResponses, GetV3AssetsAssetIdErrors, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/assets/{asset_id}',
        ...options
    });
};

/**
 * Update an asset
 * Use physical asset identifier (`asset_id`)  to update physical asset information. The endpoint is active only for authorized `asset_id`.
 */
export const patchV3AssetsAssetId = <ThrowOnError extends boolean = false>(options: Options<PatchV3AssetsAssetIdData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchV3AssetsAssetIdResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/assets/{asset_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get asset ownership
 * Use physical asset identifier (`asset_id`) to update physical asset information.
 */
export const getV3AssetsAssetIdOwnership = <ThrowOnError extends boolean = false>(options: Options<GetV3AssetsAssetIdOwnershipData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3AssetsAssetIdOwnershipResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/assets/{asset_id}/ownership',
        ...options
    });
};

/**
 * Delete a company
 * Use company identifier (`company_id`) to delete a company. The endpoint is active only for authorized `company_id`.
 */
export const deleteV3CompaniesCompanyId = <ThrowOnError extends boolean = false>(options: Options<DeleteV3CompaniesCompanyIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteV3CompaniesCompanyIdResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/companies/{company_id}',
        ...options
    });
};

/**
 * Get company by id
 * Use company identifier (`company_id`) to retrieve information on the company
 */
export const getV3CompaniesId = <ThrowOnError extends boolean = false>(options: Options<GetV3CompaniesIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3CompaniesIdResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/companies/{company_id}',
        ...options
    });
};

/**
 * Update a company
 * Use company identifier (`company_id`) to update a company. The endpoint is active only for authorized `company_id`.
 */
export const patchV3CompaniesCompanyId = <ThrowOnError extends boolean = false>(options: Options<PatchV3CompaniesCompanyIdData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchV3CompaniesCompanyIdResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/companies/{company_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get multifactor asset damage analytics at company-level
 * Use company identifier (`company_id`) to retrieve company-level multifactor asset damage analytics.
 */
export const getV3CompaniesCompanyIdClimateScores = <ThrowOnError extends boolean = false>(options: Options<GetV3CompaniesCompanyIdClimateScoresData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3CompaniesCompanyIdClimateScoresResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/companies/{company_id}/climate/scores',
        ...options
    });
};

/**
 * Get singlefactor asset damage analytics at company-level
 * Use company identifier (`company_id`) to retrieve company-level singlefactor asset damage analytics.
 */
export const getV3CompaniesCompanyIdClimateImpacts = <ThrowOnError extends boolean = false>(options: Options<GetV3CompaniesCompanyIdClimateImpactsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3CompaniesCompanyIdClimateImpactsResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/companies/{company_id}/climate/impacts',
        ...options
    });
};

/**
 * Paginate company assets
 * Use company identifier (`company_id`) and pagination parameters (limit and cursor) along with query filters (`country`, or `asset_type`) to retrieve physical asset data of the company in batches.
 */
export const getV3CompaniesCompanyIdAssets = <ThrowOnError extends boolean = false>(options: Options<GetV3CompaniesCompanyIdAssetsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3CompaniesCompanyIdAssetsResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/companies/{company_id}/assets',
        ...options
    });
};

/**
 * Get physical asset locations
 * Use company identifier (`company_id`) to retrieve physical asset locations associated with the company.
 */
export const getV3CompaniesCompanyIdAssetsLocations = <ThrowOnError extends boolean = false>(options: Options<GetV3CompaniesCompanyIdAssetsLocationsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3CompaniesCompanyIdAssetsLocationsResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/companies/{company_id}/assets/locations',
        ...options
    });
};

/**
 * Get multifactor asset damage analytics in specified range
 * Use company identifier (`company_id`) to retrieve company-level multifactor asset damage analytics.
 */
export const getV3CompaniesCompanyIdAssetsClimateScores = <ThrowOnError extends boolean = false>(options: Options<GetV3CompaniesCompanyIdAssetsClimateScoresData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3CompaniesCompanyIdAssetsClimateScoresResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/companies/{company_id}/assets/climate/scores',
        ...options
    });
};

/**
 * Get multifactor asset damage analytics in aggregate level
 * Use company identifier (`company_id`) along with aggregation level parameters (`country`, `state`, or `asset_type`) to retrieve asset damage analytics.
 */
export const getV3CompaniesCompanyIdAssetsClimateScoresAggregation = <ThrowOnError extends boolean = false>(options: Options<GetV3CompaniesCompanyIdAssetsClimateScoresAggregationData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3CompaniesCompanyIdAssetsClimateScoresAggregationResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/companies/{company_id}/assets/climate/scores/aggregation',
        ...options
    });
};

/**
 * Get company asset climate scores histogram
 * Distribute the climate scores of the assets owned by this company into bins to create a histogram. The number of bins is supplied by the 'bins' parameter
 *
 * The bin width is calculated from the number of bins by creating equal thresholds from `0.0` to `1.0`. Metrics such as VAR that go above `1.0` will be placed into the last bin.
 *
 * Only the first metric supplied in the `metrics` parameter is used in the histogram.
 *
 * The `bin_index` in the response will range from `1` to the number of bins.
 */
export const getV3CompaniesCompanyIdAssetsClimateScoresGroups = <ThrowOnError extends boolean = false>(options: Options<GetV3CompaniesCompanyIdAssetsClimateScoresGroupsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3CompaniesCompanyIdAssetsClimateScoresGroupsResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/companies/{company_id}/assets/climate/scores/histogram',
        ...options
    });
};

/**
 * Get singlefactor asset damage analytics at asset-level
 * Use company identifier (`company_id`) to retrieve company-level singlefactor asset damage analytics.
 */
export const getV3CompaniesCompanyIdAssetsClimateImpacts = <ThrowOnError extends boolean = false>(options: Options<GetV3CompaniesCompanyIdAssetsClimateImpactsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3CompaniesCompanyIdAssetsClimateImpactsResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/companies/{company_id}/assets/climate/impacts',
        ...options
    });
};

/**
 * Get singlefactor asset damage analytics in aggregate level
 * Use company identifier (`company_id`) along with aggregation level parameters (`country`, `state`, or `asset_type`) to retrieve asset damage analytics.
 */
export const getV3CompaniesCompanyIdAssetsClimateImpactsAggregation = <ThrowOnError extends boolean = false>(options: Options<GetV3CompaniesCompanyIdAssetsClimateImpactsAggregationData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3CompaniesCompanyIdAssetsClimateImpactsAggregationResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/companies/{company_id}/assets/climate/impacts/aggregation',
        ...options
    });
};

/**
 * Get asset aggregation
 * Aggregate the assets of this company by the requested property
 */
export const getV3CompaniesCompanyIdAssetsAggregation = <ThrowOnError extends boolean = false>(options: Options<GetV3CompaniesCompanyIdAssetsAggregationData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3CompaniesCompanyIdAssetsAggregationResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/companies/{company_id}/assets/aggregation',
        ...options
    });
};

/**
 * Get company subsidiaries
 * Use company identifier (`company_id`) to retrieve subsidiaries. The endpoint is available only to authorized users.
 */
export const getV3CompaniesCompanyIdSubsidiaries = <ThrowOnError extends boolean = false>(options: Options<GetV3CompaniesCompanyIdSubsidiariesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3CompaniesCompanyIdSubsidiariesResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/companies/{company_id}/subsidiaries',
        ...options
    });
};

/**
 * Add subsidiary company
 * Use company identifier (company_id) to create a subsidiary. The endpoint is available only to authorized users.
 */
export const postV3CompaniesCompanyIdSubsidiaries = <ThrowOnError extends boolean = false>(options: Options<PostV3CompaniesCompanyIdSubsidiariesData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV3CompaniesCompanyIdSubsidiariesResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/companies/{company_id}/subsidiaries',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get asset physical risk analytics
 * Use physical asset identifier (`asset_id`) to retrieve the physical risk analytics.
 */
export const getV3AssetsAssetIdClimateScores = <ThrowOnError extends boolean = false>(options: Options<GetV3AssetsAssetIdClimateScoresData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3AssetsAssetIdClimateScoresResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/assets/{asset_id}/climate/scores',
        ...options
    });
};

/**
 * Paginate companies
 * Paginate through all companies using requested filters
 *
 * `scope` query parameter values:
 * * `public` - Filter to all public companies
 * * `organization` - Filter to companies that belong to the current organization
 */
export const getV3Companies = <ThrowOnError extends boolean = false>(options?: Options<GetV3CompaniesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetV3CompaniesResponses, unknown, ThrowOnError>({
        url: '/v3/companies',
        ...options
    });
};

/**
 * Create new company
 * Create a new company
 */
export const postV3Companies = <ThrowOnError extends boolean = false>(options?: Options<PostV3CompaniesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostV3CompaniesResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/companies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Search for companies
 * Search for companies by name or identification codes
 */
export const getV3CompanySearch = <ThrowOnError extends boolean = false>(options?: Options<GetV3CompanySearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetV3CompanySearchResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/companies/search',
        ...options
    });
};

/**
 * Paginate market index groups
 * Paginate through all market index groups using requested filters
 */
export const getV3MarketsGroups = <ThrowOnError extends boolean = false>(options?: Options<GetV3MarketsGroupsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetV3MarketsGroupsResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/groups',
        ...options
    });
};

/**
 * Delete a market index group
 * Delete the specified market index group
 */
export const deleteV3MarketsGroupsGroupId = <ThrowOnError extends boolean = false>(options: Options<DeleteV3MarketsGroupsGroupIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteV3MarketsGroupsGroupIdResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/groups/{group_id}',
        ...options
    });
};

/**
 * Get market index group
 * Get a market index group by id
 */
export const getV3MarketsGroupsGroupId = <ThrowOnError extends boolean = false>(options: Options<GetV3MarketsGroupsGroupIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3MarketsGroupsGroupIdResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/groups/{group_id}',
        ...options
    });
};

/**
 * Update market index group
 * Update the specified market index group
 */
export const patchV3MarketsGroupsGroupId = <ThrowOnError extends boolean = false>(options: Options<PatchV3MarketsGroupsGroupIdData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchV3MarketsGroupsGroupIdResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/groups/{group_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get market index group constituents
 * Get a list of the constituent indexes in this market index group
 */
export const getV3MarketsGroupsGroupIdConstituents = <ThrowOnError extends boolean = false>(options: Options<GetV3MarketsGroupsGroupIdConstituentsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3MarketsGroupsGroupIdConstituentsResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/groups/{group_id}/constituents',
        ...options
    });
};

/**
 * Add a market index constituent
 * Add the specified market index as a new constituent of the group
 */
export const postV3MarketsGroupsGroupIdConstituents = <ThrowOnError extends boolean = false>(options: Options<PostV3MarketsGroupsGroupIdConstituentsData, ThrowOnError>) => {
    return (options.client ?? client).post<PostV3MarketsGroupsGroupIdConstituentsResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/groups/{group_id}/constituents',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Paginate market indexes
 * Paginate through all market indexes using requested filters
 */
export const getV3MarketsIndexes = <ThrowOnError extends boolean = false>(options?: Options<GetV3MarketsIndexesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetV3MarketsIndexesResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes',
        ...options
    });
};

/**
 * Delete a market index
 * Deletes the specified market index
 */
export const deleteV3MarketsIndexesIndexId = <ThrowOnError extends boolean = false>(options: Options<DeleteV3MarketsIndexesIndexIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteV3MarketsIndexesIndexIdResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes/{index_id}',
        ...options
    });
};

/**
 * Get market index
 * Get a market index by id
 */
export const getV3MarketsIndexesIndexId = <ThrowOnError extends boolean = false>(options: Options<GetV3MarketsIndexesIndexIdData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3MarketsIndexesIndexIdResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes/{index_id}',
        ...options
    });
};

/**
 * Update a market index
 * Update the specified market index
 */
export const patchV3MarketsIndexesIndexId = <ThrowOnError extends boolean = false>(options: Options<PatchV3MarketsIndexesIndexIdData, ThrowOnError>) => {
    return (options.client ?? client).patch<PatchV3MarketsIndexesIndexIdResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes/{index_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get market index constituents
 * Get a list of the companies in this market index
 */
export const getV3MarketsIndexesIndexIdCompanies = <ThrowOnError extends boolean = false>(options: Options<GetV3MarketsIndexesIndexIdCompaniesData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3MarketsIndexesIndexIdCompaniesResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes/{index_id}/companies',
        ...options
    });
};

/**
 * Get market index assets climate scores
 * Get climate risk scores for all assets owned by this market index
 */
export const getV3MarketsIndexesIndexIdAssetsClimateScores = <ThrowOnError extends boolean = false>(options: Options<GetV3MarketsIndexesIndexIdAssetsClimateScoresData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3MarketsIndexesIndexIdAssetsClimateScoresResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes/{index_id}/assets/climate/scores',
        ...options
    });
};

/**
 * Get market index assets climate impacts
 * Get climate risk impacts for all assets owned by this market index
 */
export const getV3MarketsIndexesIndexIdAssetsClimateImpacts = <ThrowOnError extends boolean = false>(options: Options<GetV3MarketsIndexesIndexIdAssetsClimateImpactsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3MarketsIndexesIndexIdAssetsClimateImpactsResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes/{index_id}/assets/climate/impacts',
        ...options
    });
};

/**
 * Get market index asset climate scores aggregation
 * Aggregate the climate risk scores of this market index by some property
 */
export const getV3MarketsIndexesIndexIdAssetsClimateScoresAggregation = <ThrowOnError extends boolean = false>(options: Options<GetV3MarketsIndexesIndexIdAssetsClimateScoresAggregationData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3MarketsIndexesIndexIdAssetsClimateScoresAggregationResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes/{index_id}/assets/climate/scores/aggregation',
        ...options
    });
};

/**
 * Get market index asset climate impacts aggregation
 * Aggregate the climate risk impacts of this market index by some property
 */
export const getV3MarketsIndexesIndexIdAssetsClimateImpactsAggregation = <ThrowOnError extends boolean = false>(options: Options<GetV3MarketsIndexesIndexIdAssetsClimateImpactsAggregationData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3MarketsIndexesIndexIdAssetsClimateImpactsAggregationResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes/{index_id}/assets/climate/impacts/aggregation',
        ...options
    });
};

/**
 * Get market index asset climate scores histogram
 * Distribute the climate scores of the assets owned by this market index into bins to create a histogram. The number of bins is supplied by the 'bins' parameter
 *
 * The bin width is calculated from the number of bins by creating equal thresholds from `0.0` to `1.0`. Metrics such as VAR that go above `1.0` will be placed into the last bin.
 *
 * Only the first metric supplied in the `metrics` parameter is used in the histogram.
 *
 * The `bin_index` in the response will range from `1` to the number of bins.
 */
export const getV3MarketsIndexesIndexIdAssetsClimateScoresHistogram = <ThrowOnError extends boolean = false>(options: Options<GetV3MarketsIndexesIndexIdAssetsClimateScoresHistogramData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3MarketsIndexesIndexIdAssetsClimateScoresHistogramResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes/{index_id}/assets/climate/scores/histogram',
        ...options
    });
};

/**
 * Get market index climate scores
 * Get the aggregate climate risk score of this market index
 */
export const getV3MarketsIndexesIndexIdClimateScores = <ThrowOnError extends boolean = false>(options: Options<GetV3MarketsIndexesIndexIdClimateScoresData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3MarketsIndexesIndexIdClimateScoresResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes/{index_id}/climate/scores',
        ...options
    });
};

/**
 * Get market index climate impacts
 * Get the aggregate climate risk impacts of this market index
 */
export const getV3MarketsIndexesIndexIdClimateImpacts = <ThrowOnError extends boolean = false>(options: Options<GetV3MarketsIndexesIndexIdClimateImpactsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3MarketsIndexesIndexIdClimateImpactsResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes/{index_id}/climate/impacts',
        ...options
    });
};

/**
 * Get market index company climate scores
 * Get climate risk scores for all companies owned by this market index
 */
export const getV3MarketsIndexesIndexIdCompaniesClimateScores = <ThrowOnError extends boolean = false>(options: Options<GetV3MarketsIndexesIndexIdCompaniesClimateScoresData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3MarketsIndexesIndexIdCompaniesClimateScoresResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes/{index_id}/companies/climate/scores',
        ...options
    });
};

/**
 * Get market index company climate impacts
 * Get climate risk impacts for all companies owned by this market index
 */
export const getV3MarketsIndexesIndexIdCompaniesClimateImpacts = <ThrowOnError extends boolean = false>(options: Options<GetV3MarketsIndexesIndexIdCompaniesClimateImpactsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3MarketsIndexesIndexIdCompaniesClimateImpactsResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes/{index_id}/companies/climate/impacts',
        ...options
    });
};

/**
 * Paginate market index assets
 * Paginate the assets for all companies in the market index
 */
export const getV3MarketsIndexesIndexIdAssets = <ThrowOnError extends boolean = false>(options: Options<GetV3MarketsIndexesIndexIdAssetsData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3MarketsIndexesIndexIdAssetsResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes/{index_id}/assets',
        ...options
    });
};

/**
 * Get market index assets aggregation
 * Aggregate the assets of this market index by the requested property
 */
export const getV3MarketsIndexesIndexIdAssetsAggregation = <ThrowOnError extends boolean = false>(options: Options<GetV3MarketsIndexesIndexIdAssetsAggregationData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3MarketsIndexesIndexIdAssetsAggregationResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes/{index_id}/assets/aggregation',
        ...options
    });
};

/**
 * Remove a subsidiary
 * Use identifier (`company_id` and `subsidiary_id`)  to delete the subsidiary. The endpoint is active only for authorized users.
 */
export const deleteV3CompaniesCompanyIdSubsidiariesSubsidiaryId = <ThrowOnError extends boolean = false>(options: Options<DeleteV3CompaniesCompanyIdSubsidiariesSubsidiaryIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteV3CompaniesCompanyIdSubsidiariesSubsidiaryIdResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/companies/{company_id}/subsidiaries/{subsidiary_id}',
        ...options
    });
};

/**
 * Remove a constituent
 * Remove the constituent index from the market index group
 */
export const deleteV3MarketsGroupsGroupIdConstituentsIndexId = <ThrowOnError extends boolean = false>(options: Options<DeleteV3MarketsGroupsGroupIdConstituentsIndexIdData, ThrowOnError>) => {
    return (options.client ?? client).delete<DeleteV3MarketsGroupsGroupIdConstituentsIndexIdResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/groups/{group_id}/constituents/{index_id}',
        ...options
    });
};

/**
 * Search for market groups
 * Search for market groups by name
 */
export const getV3MarketsGroupsSearch = <ThrowOnError extends boolean = false>(options?: Options<GetV3MarketsGroupsSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetV3MarketsGroupsSearchResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/groups/search',
        ...options
    });
};

/**
 * Search for market indexes
 * Search for market indexes by name
 */
export const getV3MarketsIndexesSearch = <ThrowOnError extends boolean = false>(options?: Options<GetV3MarketsIndexesSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetV3MarketsIndexesSearchResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes/search',
        ...options
    });
};

/**
 * Get asset geo clusters
 * For use in geospatial mapping. Clusters all assets of the company at the given zoom level, returning the location and count of assets for each cluster.
 *
 * Reference zoom levels:
 * Zoom Levels 0-5: World to continent scale.
 * Zoom Levels 6-9: Large regions or states.
 * Zoom Levels 10-13: Cities and towns.
 * Zoom Levels 14-18: Streets and individual buildings.
 * Zoom Levels 19-22: Very detailed street-level views (not all map providers offer data at this level).
 */
export const getV3CompaniesCompanyIdGeoClusters = <ThrowOnError extends boolean = false>(options: Options<GetV3CompaniesCompanyIdGeoClustersData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3CompaniesCompanyIdGeoClustersResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/companies/{company_id}/geo/clusters',
        ...options
    });
};

/**
 * Get asset geo clusters
 * For use in geospatial mapping. Clusters all assets of the companies at the given zoom level, returning the location and count of assets for each cluster.
 *
 * Reference zoom levels:
 * Zoom Levels 0-5: World to continent scale.
 * Zoom Levels 6-9: Large regions or states.
 * Zoom Levels 10-13: Cities and towns.
 * Zoom Levels 14-18: Streets and individual buildings.
 * Zoom Levels 19-22: Very detailed street-level views (not all map providers offer data at this level).
 */
export const getV3MarketsIndexesIndexIdGeoClusters = <ThrowOnError extends boolean = false>(options: Options<GetV3MarketsIndexesIndexIdGeoClustersData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3MarketsIndexesIndexIdGeoClustersResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes/{index_id}/geo/clusters',
        ...options
    });
};

/**
 * Get market companies climate score histogram
 */
export const v3GetMarketsIndexesIndexIdCompaniesClimateScoresHistogram = <ThrowOnError extends boolean = false>(options: Options<V3GetMarketsIndexesIndexIdCompaniesClimateScoresHistogramData, ThrowOnError>) => {
    return (options.client ?? client).get<V3GetMarketsIndexesIndexIdCompaniesClimateScoresHistogramResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes/{index_id}/companies/climate/scores/histogram',
        ...options
    });
};

/**
 * Get market index companies aggregation
 * Aggregate the companies in the market index
 */
export const getV3MarketsIndexesIndexIdCompaniesAggregation = <ThrowOnError extends boolean = false>(options: Options<GetV3MarketsIndexesIndexIdCompaniesAggregationData, ThrowOnError>) => {
    return (options.client ?? client).get<GetV3MarketsIndexesIndexIdCompaniesAggregationResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/markets/indexes/{index_id}/companies/aggregation',
        ...options
    });
};

/**
 * Search for assets
 * Use identifier (`scope`) to search for assets.
 */
export const getV3AssetsSearch = <ThrowOnError extends boolean = false>(options?: Options<GetV3AssetsSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetV3AssetsSearchResponses, unknown, ThrowOnError>({
        security: [
            {
                in: 'query',
                name: 'key',
                type: 'apiKey'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v3/assets/search',
        ...options
    });
};
